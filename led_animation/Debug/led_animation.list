
led_animation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b1c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c48  08002c48  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002c48  08002c48  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c48  08002c48  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c4c  08002c4c  00012c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002c50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000058  08002ca8  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08002ca8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009122  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a54  00000000  00000000  000291a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  0002abf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002b610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d9e  00000000  00000000  0002bf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8a6  00000000  00000000  00042cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082358  00000000  00000000  0004e56c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d08c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027dc  00000000  00000000  000d0918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c10 	.word	0x08002c10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002c10 	.word	0x08002c10

0800014c <mode>:
int buttonreset_flag=0;
int buttoninc_flag=0;
int buttondec_flag=0;

int mode()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(buttonreset_flag==1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <mode+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <mode+0x16>
	{
		buttonreset_flag=0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <mode+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <mode+0x18>
	}else {
		return 0;
 8000162:	2300      	movs	r3, #0
	}
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <inc>:
int inc()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(buttoninc_flag==1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <inc+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <inc+0x16>
	{
		buttoninc_flag=0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <inc+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <inc+0x18>
	}else {
		return 0;
 8000186:	2300      	movs	r3, #0
	}
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <set>:
int set()
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(buttondec_flag==1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <set+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <set+0x16>
	{
		buttondec_flag=0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <set+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <set+0x18>
	}else {
		return 0;
 80001aa:	2300      	movs	r3, #0
	}
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <getresetinput>:

void getresetinput()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	keyregreset[0]=keyregreset[1];
 80001bc:	4b23      	ldr	r3, [pc, #140]	; (800024c <getresetinput+0x94>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4a22      	ldr	r2, [pc, #136]	; (800024c <getresetinput+0x94>)
 80001c2:	6013      	str	r3, [r2, #0]
	keyregreset[1]=keyregreset[2];
 80001c4:	4b21      	ldr	r3, [pc, #132]	; (800024c <getresetinput+0x94>)
 80001c6:	689b      	ldr	r3, [r3, #8]
 80001c8:	4a20      	ldr	r2, [pc, #128]	; (800024c <getresetinput+0x94>)
 80001ca:	6053      	str	r3, [r2, #4]
	keyregreset[2]= HAL_GPIO_ReadPin(buttonreset_GPIO_Port, buttonreset_Pin);
 80001cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d0:	481f      	ldr	r0, [pc, #124]	; (8000250 <getresetinput+0x98>)
 80001d2:	f001 fcdd 	bl	8001b90 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b1c      	ldr	r3, [pc, #112]	; (800024c <getresetinput+0x94>)
 80001dc:	609a      	str	r2, [r3, #8]

	if( (keyregreset[0] == keyregreset[1]) && (keyregreset[1] == keyregreset[2]))
 80001de:	4b1b      	ldr	r3, [pc, #108]	; (800024c <getresetinput+0x94>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	4b1a      	ldr	r3, [pc, #104]	; (800024c <getresetinput+0x94>)
 80001e4:	685b      	ldr	r3, [r3, #4]
 80001e6:	429a      	cmp	r2, r3
 80001e8:	d12e      	bne.n	8000248 <getresetinput+0x90>
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <getresetinput+0x94>)
 80001ec:	685a      	ldr	r2, [r3, #4]
 80001ee:	4b17      	ldr	r3, [pc, #92]	; (800024c <getresetinput+0x94>)
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d128      	bne.n	8000248 <getresetinput+0x90>
	{
		if(keyregreset[3] != keyregreset[2])
 80001f6:	4b15      	ldr	r3, [pc, #84]	; (800024c <getresetinput+0x94>)
 80001f8:	68da      	ldr	r2, [r3, #12]
 80001fa:	4b14      	ldr	r3, [pc, #80]	; (800024c <getresetinput+0x94>)
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	429a      	cmp	r2, r3
 8000200:	d00f      	beq.n	8000222 <getresetinput+0x6a>
		{
			keyregreset[3]=keyregreset[2];
 8000202:	4b12      	ldr	r3, [pc, #72]	; (800024c <getresetinput+0x94>)
 8000204:	689b      	ldr	r3, [r3, #8]
 8000206:	4a11      	ldr	r2, [pc, #68]	; (800024c <getresetinput+0x94>)
 8000208:	60d3      	str	r3, [r2, #12]
			if(keyregreset[2]==pressed_state)
 800020a:	4b10      	ldr	r3, [pc, #64]	; (800024c <getresetinput+0x94>)
 800020c:	689b      	ldr	r3, [r3, #8]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d11a      	bne.n	8000248 <getresetinput+0x90>
			{
				buttonreset_flag=1;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <getresetinput+0x9c>)
 8000214:	2201      	movs	r2, #1
 8000216:	601a      	str	r2, [r3, #0]
				timerforkeyregreset=300;
 8000218:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <getresetinput+0xa0>)
 800021a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800021e:	601a      	str	r2, [r3, #0]
					buttonreset_flag=1;
				}
			}
		}
	}
}
 8000220:	e012      	b.n	8000248 <getresetinput+0x90>
			timerforkeyregreset--;
 8000222:	4b0d      	ldr	r3, [pc, #52]	; (8000258 <getresetinput+0xa0>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	3b01      	subs	r3, #1
 8000228:	4a0b      	ldr	r2, [pc, #44]	; (8000258 <getresetinput+0xa0>)
 800022a:	6013      	str	r3, [r2, #0]
			if(timerforkeyregreset==0)
 800022c:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <getresetinput+0xa0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	2b00      	cmp	r3, #0
 8000232:	d109      	bne.n	8000248 <getresetinput+0x90>
				if(keyregreset[2]==pressed_state)
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <getresetinput+0x94>)
 8000236:	689b      	ldr	r3, [r3, #8]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d105      	bne.n	8000248 <getresetinput+0x90>
					timerforkeyregreset=100;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <getresetinput+0xa0>)
 800023e:	2264      	movs	r2, #100	; 0x64
 8000240:	601a      	str	r2, [r3, #0]
					buttonreset_flag=1;
 8000242:	4b04      	ldr	r3, [pc, #16]	; (8000254 <getresetinput+0x9c>)
 8000244:	2201      	movs	r2, #1
 8000246:	601a      	str	r2, [r3, #0]
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	20000000 	.word	0x20000000
 8000250:	40011000 	.word	0x40011000
 8000254:	20000074 	.word	0x20000074
 8000258:	20000030 	.word	0x20000030

0800025c <getincinput>:
void getincinput()
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	keyreginc[0]=keyreginc[1];
 8000260:	4b23      	ldr	r3, [pc, #140]	; (80002f0 <getincinput+0x94>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a22      	ldr	r2, [pc, #136]	; (80002f0 <getincinput+0x94>)
 8000266:	6013      	str	r3, [r2, #0]
	keyreginc[1]=keyreginc[2];
 8000268:	4b21      	ldr	r3, [pc, #132]	; (80002f0 <getincinput+0x94>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a20      	ldr	r2, [pc, #128]	; (80002f0 <getincinput+0x94>)
 800026e:	6053      	str	r3, [r2, #4]
	keyreginc[2]= HAL_GPIO_ReadPin(buttoninc_GPIO_Port, buttoninc_Pin);
 8000270:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000274:	481f      	ldr	r0, [pc, #124]	; (80002f4 <getincinput+0x98>)
 8000276:	f001 fc8b 	bl	8001b90 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	461a      	mov	r2, r3
 800027e:	4b1c      	ldr	r3, [pc, #112]	; (80002f0 <getincinput+0x94>)
 8000280:	609a      	str	r2, [r3, #8]

	if( (keyreginc[0] == keyreginc[1]) && (keyreginc[1] == keyreginc[2]))
 8000282:	4b1b      	ldr	r3, [pc, #108]	; (80002f0 <getincinput+0x94>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <getincinput+0x94>)
 8000288:	685b      	ldr	r3, [r3, #4]
 800028a:	429a      	cmp	r2, r3
 800028c:	d12e      	bne.n	80002ec <getincinput+0x90>
 800028e:	4b18      	ldr	r3, [pc, #96]	; (80002f0 <getincinput+0x94>)
 8000290:	685a      	ldr	r2, [r3, #4]
 8000292:	4b17      	ldr	r3, [pc, #92]	; (80002f0 <getincinput+0x94>)
 8000294:	689b      	ldr	r3, [r3, #8]
 8000296:	429a      	cmp	r2, r3
 8000298:	d128      	bne.n	80002ec <getincinput+0x90>
	{
		if(keyreginc[3] != keyreginc[2])
 800029a:	4b15      	ldr	r3, [pc, #84]	; (80002f0 <getincinput+0x94>)
 800029c:	68da      	ldr	r2, [r3, #12]
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <getincinput+0x94>)
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d00f      	beq.n	80002c6 <getincinput+0x6a>
		{
			keyreginc[3]=keyreginc[2];
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <getincinput+0x94>)
 80002a8:	689b      	ldr	r3, [r3, #8]
 80002aa:	4a11      	ldr	r2, [pc, #68]	; (80002f0 <getincinput+0x94>)
 80002ac:	60d3      	str	r3, [r2, #12]
			if(keyreginc[2]==pressed_state)
 80002ae:	4b10      	ldr	r3, [pc, #64]	; (80002f0 <getincinput+0x94>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d11a      	bne.n	80002ec <getincinput+0x90>
			{
				buttoninc_flag=1;
 80002b6:	4b10      	ldr	r3, [pc, #64]	; (80002f8 <getincinput+0x9c>)
 80002b8:	2201      	movs	r2, #1
 80002ba:	601a      	str	r2, [r3, #0]
				timerforkeyreginc=300;
 80002bc:	4b0f      	ldr	r3, [pc, #60]	; (80002fc <getincinput+0xa0>)
 80002be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80002c2:	601a      	str	r2, [r3, #0]
					buttoninc_flag=1;
				}
			}
		}
	}
}
 80002c4:	e012      	b.n	80002ec <getincinput+0x90>
			timerforkeyreginc--;
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <getincinput+0xa0>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	3b01      	subs	r3, #1
 80002cc:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <getincinput+0xa0>)
 80002ce:	6013      	str	r3, [r2, #0]
			if(timerforkeyreginc==0)
 80002d0:	4b0a      	ldr	r3, [pc, #40]	; (80002fc <getincinput+0xa0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d109      	bne.n	80002ec <getincinput+0x90>
				if(keyreginc[2]==pressed_state)
 80002d8:	4b05      	ldr	r3, [pc, #20]	; (80002f0 <getincinput+0x94>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d105      	bne.n	80002ec <getincinput+0x90>
					timerforkeyreginc=100;
 80002e0:	4b06      	ldr	r3, [pc, #24]	; (80002fc <getincinput+0xa0>)
 80002e2:	2264      	movs	r2, #100	; 0x64
 80002e4:	601a      	str	r2, [r3, #0]
					buttoninc_flag=1;
 80002e6:	4b04      	ldr	r3, [pc, #16]	; (80002f8 <getincinput+0x9c>)
 80002e8:	2201      	movs	r2, #1
 80002ea:	601a      	str	r2, [r3, #0]
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	20000010 	.word	0x20000010
 80002f4:	40011000 	.word	0x40011000
 80002f8:	20000078 	.word	0x20000078
 80002fc:	20000034 	.word	0x20000034

08000300 <getdecinput>:
void getdecinput()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	keyregdec[0]=keyregdec[1];
 8000304:	4b23      	ldr	r3, [pc, #140]	; (8000394 <getdecinput+0x94>)
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	4a22      	ldr	r2, [pc, #136]	; (8000394 <getdecinput+0x94>)
 800030a:	6013      	str	r3, [r2, #0]
	keyregdec[1]=keyregdec[2];
 800030c:	4b21      	ldr	r3, [pc, #132]	; (8000394 <getdecinput+0x94>)
 800030e:	689b      	ldr	r3, [r3, #8]
 8000310:	4a20      	ldr	r2, [pc, #128]	; (8000394 <getdecinput+0x94>)
 8000312:	6053      	str	r3, [r2, #4]
	keyregdec[2]= HAL_GPIO_ReadPin(buttondec_GPIO_Port, buttondec_Pin);
 8000314:	2101      	movs	r1, #1
 8000316:	4820      	ldr	r0, [pc, #128]	; (8000398 <getdecinput+0x98>)
 8000318:	f001 fc3a 	bl	8001b90 <HAL_GPIO_ReadPin>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <getdecinput+0x94>)
 8000322:	609a      	str	r2, [r3, #8]

	if( (keyregdec[0] == keyregdec[1]) && (keyregdec[1] == keyregdec[2]))
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <getdecinput+0x94>)
 8000326:	681a      	ldr	r2, [r3, #0]
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <getdecinput+0x94>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	d12e      	bne.n	800038e <getdecinput+0x8e>
 8000330:	4b18      	ldr	r3, [pc, #96]	; (8000394 <getdecinput+0x94>)
 8000332:	685a      	ldr	r2, [r3, #4]
 8000334:	4b17      	ldr	r3, [pc, #92]	; (8000394 <getdecinput+0x94>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	429a      	cmp	r2, r3
 800033a:	d128      	bne.n	800038e <getdecinput+0x8e>
	{
		if(keyregdec[3] != keyregdec[2])
 800033c:	4b15      	ldr	r3, [pc, #84]	; (8000394 <getdecinput+0x94>)
 800033e:	68da      	ldr	r2, [r3, #12]
 8000340:	4b14      	ldr	r3, [pc, #80]	; (8000394 <getdecinput+0x94>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	429a      	cmp	r2, r3
 8000346:	d00f      	beq.n	8000368 <getdecinput+0x68>
		{
			keyregdec[3]=keyregdec[2];
 8000348:	4b12      	ldr	r3, [pc, #72]	; (8000394 <getdecinput+0x94>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a11      	ldr	r2, [pc, #68]	; (8000394 <getdecinput+0x94>)
 800034e:	60d3      	str	r3, [r2, #12]
			if(keyregdec[2]==pressed_state)
 8000350:	4b10      	ldr	r3, [pc, #64]	; (8000394 <getdecinput+0x94>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d11a      	bne.n	800038e <getdecinput+0x8e>
			{
				buttondec_flag=1;
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <getdecinput+0x9c>)
 800035a:	2201      	movs	r2, #1
 800035c:	601a      	str	r2, [r3, #0]
				timerforkeyregdec=300;
 800035e:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <getdecinput+0xa0>)
 8000360:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000364:	601a      	str	r2, [r3, #0]
					buttondec_flag=1;
				}
			}
		}
	}
}
 8000366:	e012      	b.n	800038e <getdecinput+0x8e>
			timerforkeyregdec--;
 8000368:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <getdecinput+0xa0>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	3b01      	subs	r3, #1
 800036e:	4a0c      	ldr	r2, [pc, #48]	; (80003a0 <getdecinput+0xa0>)
 8000370:	6013      	str	r3, [r2, #0]
			if(timerforkeyregdec==0)
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <getdecinput+0xa0>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d109      	bne.n	800038e <getdecinput+0x8e>
				if(keyregdec[2]==pressed_state)
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <getdecinput+0x94>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d105      	bne.n	800038e <getdecinput+0x8e>
					timerforkeyregdec=100;
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <getdecinput+0xa0>)
 8000384:	2264      	movs	r2, #100	; 0x64
 8000386:	601a      	str	r2, [r3, #0]
					buttondec_flag=1;
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <getdecinput+0x9c>)
 800038a:	2201      	movs	r2, #1
 800038c:	601a      	str	r2, [r3, #0]
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000020 	.word	0x20000020
 8000398:	40011400 	.word	0x40011400
 800039c:	2000007c 	.word	0x2000007c
 80003a0:	20000038 	.word	0x20000038

080003a4 <display7SEG11>:
 *      Author: WinZ
 */
#include "display7seg.h"

void display7SEG11(int num)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b09      	cmp	r3, #9
 80003b0:	d87f      	bhi.n	80004b2 <display7SEG11+0x10e>
 80003b2:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <display7SEG11+0x14>)
 80003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b8:	080003e1 	.word	0x080003e1
 80003bc:	080003f7 	.word	0x080003f7
 80003c0:	0800040d 	.word	0x0800040d
 80003c4:	08000423 	.word	0x08000423
 80003c8:	08000439 	.word	0x08000439
 80003cc:	0800044f 	.word	0x0800044f
 80003d0:	08000465 	.word	0x08000465
 80003d4:	0800047b 	.word	0x0800047b
 80003d8:	08000491 	.word	0x08000491
 80003dc:	0800049d 	.word	0x0800049d
	switch(num)
	{
	case 0:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|b11_Pin|c11_Pin|d11_Pin|e11_Pin|f11_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	213f      	movs	r1, #63	; 0x3f
 80003e4:	4835      	ldr	r0, [pc, #212]	; (80004bc <display7SEG11+0x118>)
 80003e6:	f001 fbea 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, g11_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2140      	movs	r1, #64	; 0x40
 80003ee:	4833      	ldr	r0, [pc, #204]	; (80004bc <display7SEG11+0x118>)
 80003f0:	f001 fbe5 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80003f4:	e05e      	b.n	80004b4 <display7SEG11+0x110>
	case 1:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|d11_Pin|e11_Pin|f11_Pin|g11_Pin, GPIO_PIN_SET);
 80003f6:	2201      	movs	r2, #1
 80003f8:	2179      	movs	r1, #121	; 0x79
 80003fa:	4830      	ldr	r0, [pc, #192]	; (80004bc <display7SEG11+0x118>)
 80003fc:	f001 fbdf 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b11_Pin|c11_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2106      	movs	r1, #6
 8000404:	482d      	ldr	r0, [pc, #180]	; (80004bc <display7SEG11+0x118>)
 8000406:	f001 fbda 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 800040a:	e053      	b.n	80004b4 <display7SEG11+0x110>
	case 2:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|d11_Pin|e11_Pin|b11_Pin|g11_Pin, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	215b      	movs	r1, #91	; 0x5b
 8000410:	482a      	ldr	r0, [pc, #168]	; (80004bc <display7SEG11+0x118>)
 8000412:	f001 fbd4 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, f11_Pin|c11_Pin, GPIO_PIN_SET);
 8000416:	2201      	movs	r2, #1
 8000418:	2124      	movs	r1, #36	; 0x24
 800041a:	4828      	ldr	r0, [pc, #160]	; (80004bc <display7SEG11+0x118>)
 800041c:	f001 fbcf 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000420:	e048      	b.n	80004b4 <display7SEG11+0x110>
	case 3:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|d11_Pin|c11_Pin|b11_Pin|g11_Pin, GPIO_PIN_RESET);
 8000422:	2200      	movs	r2, #0
 8000424:	214f      	movs	r1, #79	; 0x4f
 8000426:	4825      	ldr	r0, [pc, #148]	; (80004bc <display7SEG11+0x118>)
 8000428:	f001 fbc9 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, f11_Pin|e11_Pin, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	2130      	movs	r1, #48	; 0x30
 8000430:	4822      	ldr	r0, [pc, #136]	; (80004bc <display7SEG11+0x118>)
 8000432:	f001 fbc4 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000436:	e03d      	b.n	80004b4 <display7SEG11+0x110>
	case 4:
		HAL_GPIO_WritePin(GPIOA, b11_Pin|c11_Pin|f11_Pin|g11_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2166      	movs	r1, #102	; 0x66
 800043c:	481f      	ldr	r0, [pc, #124]	; (80004bc <display7SEG11+0x118>)
 800043e:	f001 fbbe 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a11_Pin|e11_Pin|d11_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2119      	movs	r1, #25
 8000446:	481d      	ldr	r0, [pc, #116]	; (80004bc <display7SEG11+0x118>)
 8000448:	f001 fbb9 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 800044c:	e032      	b.n	80004b4 <display7SEG11+0x110>
	case 5:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|c11_Pin|d11_Pin|f11_Pin|g11_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	216d      	movs	r1, #109	; 0x6d
 8000452:	481a      	ldr	r0, [pc, #104]	; (80004bc <display7SEG11+0x118>)
 8000454:	f001 fbb3 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b11_Pin|e11_Pin, GPIO_PIN_SET);
 8000458:	2201      	movs	r2, #1
 800045a:	2112      	movs	r1, #18
 800045c:	4817      	ldr	r0, [pc, #92]	; (80004bc <display7SEG11+0x118>)
 800045e:	f001 fbae 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000462:	e027      	b.n	80004b4 <display7SEG11+0x110>
	case 6:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|c11_Pin|d11_Pin|e11_Pin|f11_Pin|g11_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	217d      	movs	r1, #125	; 0x7d
 8000468:	4814      	ldr	r0, [pc, #80]	; (80004bc <display7SEG11+0x118>)
 800046a:	f001 fba8 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b11_Pin, GPIO_PIN_SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2102      	movs	r1, #2
 8000472:	4812      	ldr	r0, [pc, #72]	; (80004bc <display7SEG11+0x118>)
 8000474:	f001 fba3 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000478:	e01c      	b.n	80004b4 <display7SEG11+0x110>
	case 7:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|b11_Pin|c11_Pin, GPIO_PIN_RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2107      	movs	r1, #7
 800047e:	480f      	ldr	r0, [pc, #60]	; (80004bc <display7SEG11+0x118>)
 8000480:	f001 fb9d 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, f11_Pin|d11_Pin|e11_Pin|g11_Pin, GPIO_PIN_SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2178      	movs	r1, #120	; 0x78
 8000488:	480c      	ldr	r0, [pc, #48]	; (80004bc <display7SEG11+0x118>)
 800048a:	f001 fb98 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 800048e:	e011      	b.n	80004b4 <display7SEG11+0x110>
	case 8:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|b11_Pin|c11_Pin|f11_Pin|d11_Pin|e11_Pin|g11_Pin, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	217f      	movs	r1, #127	; 0x7f
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <display7SEG11+0x118>)
 8000496:	f001 fb92 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 800049a:	e00b      	b.n	80004b4 <display7SEG11+0x110>
	case 9:
		HAL_GPIO_WritePin(GPIOA, a11_Pin|b11_Pin|c11_Pin|f11_Pin|d11_Pin|g11_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	216f      	movs	r1, #111	; 0x6f
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <display7SEG11+0x118>)
 80004a2:	f001 fb8c 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, e11_Pin, GPIO_PIN_SET);
 80004a6:	2201      	movs	r2, #1
 80004a8:	2110      	movs	r1, #16
 80004aa:	4804      	ldr	r0, [pc, #16]	; (80004bc <display7SEG11+0x118>)
 80004ac:	f001 fb87 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80004b0:	e000      	b.n	80004b4 <display7SEG11+0x110>
	default: break;
 80004b2:	bf00      	nop
	}
}
 80004b4:	bf00      	nop
 80004b6:	3708      	adds	r7, #8
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40010800 	.word	0x40010800

080004c0 <display7SEG21>:

void display7SEG21(int num)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	2b09      	cmp	r3, #9
 80004cc:	f200 80d0 	bhi.w	8000670 <display7SEG21+0x1b0>
 80004d0:	a201      	add	r2, pc, #4	; (adr r2, 80004d8 <display7SEG21+0x18>)
 80004d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d6:	bf00      	nop
 80004d8:	08000501 	.word	0x08000501
 80004dc:	08000523 	.word	0x08000523
 80004e0:	08000551 	.word	0x08000551
 80004e4:	08000573 	.word	0x08000573
 80004e8:	08000595 	.word	0x08000595
 80004ec:	080005c3 	.word	0x080005c3
 80004f0:	080005f1 	.word	0x080005f1
 80004f4:	08000615 	.word	0x08000615
 80004f8:	08000637 	.word	0x08000637
 80004fc:	0800064f 	.word	0x0800064f
	switch(num)
	{
	case 0:
		HAL_GPIO_WritePin(GPIOB, c21_Pin|d21_Pin|e21_Pin|f21_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	210f      	movs	r1, #15
 8000504:	485d      	ldr	r0, [pc, #372]	; (800067c <display7SEG21+0x1bc>)
 8000506:	f001 fb5a 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, g21_Pin, GPIO_PIN_SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2110      	movs	r1, #16
 800050e:	485b      	ldr	r0, [pc, #364]	; (800067c <display7SEG21+0x1bc>)
 8000510:	f001 fb55 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin|b21_Pin, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800051a:	4859      	ldr	r0, [pc, #356]	; (8000680 <display7SEG21+0x1c0>)
 800051c:	f001 fb4f 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000520:	e0a7      	b.n	8000672 <display7SEG21+0x1b2>
	case 1:
		HAL_GPIO_WritePin(GPIOB, d21_Pin|e21_Pin|f21_Pin|g21_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	211e      	movs	r1, #30
 8000526:	4855      	ldr	r0, [pc, #340]	; (800067c <display7SEG21+0x1bc>)
 8000528:	f001 fb49 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, c21_Pin, GPIO_PIN_RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	4852      	ldr	r0, [pc, #328]	; (800067c <display7SEG21+0x1bc>)
 8000532:	f001 fb44 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin, GPIO_PIN_SET);
 8000536:	2201      	movs	r2, #1
 8000538:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800053c:	4850      	ldr	r0, [pc, #320]	; (8000680 <display7SEG21+0x1c0>)
 800053e:	f001 fb3e 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b21_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000548:	484d      	ldr	r0, [pc, #308]	; (8000680 <display7SEG21+0x1c0>)
 800054a:	f001 fb38 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 800054e:	e090      	b.n	8000672 <display7SEG21+0x1b2>
	case 2:
		HAL_GPIO_WritePin(GPIOB, d21_Pin|e21_Pin|g21_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2116      	movs	r1, #22
 8000554:	4849      	ldr	r0, [pc, #292]	; (800067c <display7SEG21+0x1bc>)
 8000556:	f001 fb32 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, f21_Pin|c21_Pin, GPIO_PIN_SET);
 800055a:	2201      	movs	r2, #1
 800055c:	2109      	movs	r1, #9
 800055e:	4847      	ldr	r0, [pc, #284]	; (800067c <display7SEG21+0x1bc>)
 8000560:	f001 fb2d 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin|b21_Pin, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800056a:	4845      	ldr	r0, [pc, #276]	; (8000680 <display7SEG21+0x1c0>)
 800056c:	f001 fb27 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000570:	e07f      	b.n	8000672 <display7SEG21+0x1b2>
	case 3:
		HAL_GPIO_WritePin(GPIOB, d21_Pin|c21_Pin|g21_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2113      	movs	r1, #19
 8000576:	4841      	ldr	r0, [pc, #260]	; (800067c <display7SEG21+0x1bc>)
 8000578:	f001 fb21 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, f21_Pin|e21_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	210c      	movs	r1, #12
 8000580:	483e      	ldr	r0, [pc, #248]	; (800067c <display7SEG21+0x1bc>)
 8000582:	f001 fb1c 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin|b21_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800058c:	483c      	ldr	r0, [pc, #240]	; (8000680 <display7SEG21+0x1c0>)
 800058e:	f001 fb16 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000592:	e06e      	b.n	8000672 <display7SEG21+0x1b2>
	case 4:
		HAL_GPIO_WritePin(GPIOB, c21_Pin|f21_Pin|g21_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2119      	movs	r1, #25
 8000598:	4838      	ldr	r0, [pc, #224]	; (800067c <display7SEG21+0x1bc>)
 800059a:	f001 fb10 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e21_Pin|d21_Pin, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2106      	movs	r1, #6
 80005a2:	4836      	ldr	r0, [pc, #216]	; (800067c <display7SEG21+0x1bc>)
 80005a4:	f001 fb0b 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b21_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ae:	4834      	ldr	r0, [pc, #208]	; (8000680 <display7SEG21+0x1c0>)
 80005b0:	f001 fb05 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ba:	4831      	ldr	r0, [pc, #196]	; (8000680 <display7SEG21+0x1c0>)
 80005bc:	f001 faff 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80005c0:	e057      	b.n	8000672 <display7SEG21+0x1b2>
	case 5:
		HAL_GPIO_WritePin(GPIOB, c21_Pin|d21_Pin|f21_Pin|g21_Pin, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	211b      	movs	r1, #27
 80005c6:	482d      	ldr	r0, [pc, #180]	; (800067c <display7SEG21+0x1bc>)
 80005c8:	f001 faf9 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e21_Pin, GPIO_PIN_SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2104      	movs	r1, #4
 80005d0:	482a      	ldr	r0, [pc, #168]	; (800067c <display7SEG21+0x1bc>)
 80005d2:	f001 faf4 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin, GPIO_PIN_RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005dc:	4828      	ldr	r0, [pc, #160]	; (8000680 <display7SEG21+0x1c0>)
 80005de:	f001 faee 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b21_Pin, GPIO_PIN_SET);
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e8:	4825      	ldr	r0, [pc, #148]	; (8000680 <display7SEG21+0x1c0>)
 80005ea:	f001 fae8 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80005ee:	e040      	b.n	8000672 <display7SEG21+0x1b2>
	case 6:
		HAL_GPIO_WritePin(GPIOB, c21_Pin|d21_Pin|e21_Pin|f21_Pin|g21_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	211f      	movs	r1, #31
 80005f4:	4821      	ldr	r0, [pc, #132]	; (800067c <display7SEG21+0x1bc>)
 80005f6:	f001 fae2 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b21_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000600:	481f      	ldr	r0, [pc, #124]	; (8000680 <display7SEG21+0x1c0>)
 8000602:	f001 fadc 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800060c:	481c      	ldr	r0, [pc, #112]	; (8000680 <display7SEG21+0x1c0>)
 800060e:	f001 fad6 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000612:	e02e      	b.n	8000672 <display7SEG21+0x1b2>
	case 7:
		HAL_GPIO_WritePin(GPIOB, c21_Pin, GPIO_PIN_RESET);
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	4818      	ldr	r0, [pc, #96]	; (800067c <display7SEG21+0x1bc>)
 800061a:	f001 fad0 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, f21_Pin|d21_Pin|e21_Pin|g21_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	211e      	movs	r1, #30
 8000622:	4816      	ldr	r0, [pc, #88]	; (800067c <display7SEG21+0x1bc>)
 8000624:	f001 facb 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin|b21_Pin, GPIO_PIN_RESET);
 8000628:	2200      	movs	r2, #0
 800062a:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800062e:	4814      	ldr	r0, [pc, #80]	; (8000680 <display7SEG21+0x1c0>)
 8000630:	f001 fac5 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000634:	e01d      	b.n	8000672 <display7SEG21+0x1b2>
	case 8:
		HAL_GPIO_WritePin(GPIOB, c21_Pin|f21_Pin|d21_Pin|e21_Pin|g21_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	211f      	movs	r1, #31
 800063a:	4810      	ldr	r0, [pc, #64]	; (800067c <display7SEG21+0x1bc>)
 800063c:	f001 fabf 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin|b21_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <display7SEG21+0x1c0>)
 8000648:	f001 fab9 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 800064c:	e011      	b.n	8000672 <display7SEG21+0x1b2>
	case 9:
		HAL_GPIO_WritePin(GPIOB, c21_Pin|f21_Pin|d21_Pin|g21_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	211b      	movs	r1, #27
 8000652:	480a      	ldr	r0, [pc, #40]	; (800067c <display7SEG21+0x1bc>)
 8000654:	f001 fab3 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, e21_Pin, GPIO_PIN_SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2104      	movs	r1, #4
 800065c:	4807      	ldr	r0, [pc, #28]	; (800067c <display7SEG21+0x1bc>)
 800065e:	f001 faae 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a21_Pin|b21_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <display7SEG21+0x1c0>)
 800066a:	f001 faa8 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 800066e:	e000      	b.n	8000672 <display7SEG21+0x1b2>
	default: break;
 8000670:	bf00      	nop
	}
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40010c00 	.word	0x40010c00
 8000680:	40010800 	.word	0x40010800

08000684 <display7SEG12>:

void display7SEG12(int num)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b09      	cmp	r3, #9
 8000690:	f200 8094 	bhi.w	80007bc <display7SEG12+0x138>
 8000694:	a201      	add	r2, pc, #4	; (adr r2, 800069c <display7SEG12+0x18>)
 8000696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069a:	bf00      	nop
 800069c:	080006c5 	.word	0x080006c5
 80006a0:	080006df 	.word	0x080006df
 80006a4:	080006f9 	.word	0x080006f9
 80006a8:	08000713 	.word	0x08000713
 80006ac:	0800072d 	.word	0x0800072d
 80006b0:	08000747 	.word	0x08000747
 80006b4:	08000761 	.word	0x08000761
 80006b8:	0800077b 	.word	0x0800077b
 80006bc:	08000795 	.word	0x08000795
 80006c0:	080007a3 	.word	0x080007a3
	switch(num)
	{
	case 0:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|b12_Pin|c12_Pin|d12_Pin|e12_Pin|f12_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80006ca:	483f      	ldr	r0, [pc, #252]	; (80007c8 <display7SEG12+0x144>)
 80006cc:	f001 fa77 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, g12_Pin, GPIO_PIN_SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d6:	483c      	ldr	r0, [pc, #240]	; (80007c8 <display7SEG12+0x144>)
 80006d8:	f001 fa71 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80006dc:	e06f      	b.n	80007be <display7SEG12+0x13a>
	case 1:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|d12_Pin|e12_Pin|f12_Pin|g12_Pin, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	f44f 5172 	mov.w	r1, #15488	; 0x3c80
 80006e4:	4838      	ldr	r0, [pc, #224]	; (80007c8 <display7SEG12+0x144>)
 80006e6:	f001 fa6a 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b12_Pin|c12_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 7140 	mov.w	r1, #768	; 0x300
 80006f0:	4835      	ldr	r0, [pc, #212]	; (80007c8 <display7SEG12+0x144>)
 80006f2:	f001 fa64 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80006f6:	e062      	b.n	80007be <display7SEG12+0x13a>
	case 2:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|d12_Pin|e12_Pin|b12_Pin|g12_Pin, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	f44f 5136 	mov.w	r1, #11648	; 0x2d80
 80006fe:	4832      	ldr	r0, [pc, #200]	; (80007c8 <display7SEG12+0x144>)
 8000700:	f001 fa5d 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, f12_Pin|c12_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 800070a:	482f      	ldr	r0, [pc, #188]	; (80007c8 <display7SEG12+0x144>)
 800070c:	f001 fa57 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000710:	e055      	b.n	80007be <display7SEG12+0x13a>
	case 3:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|d12_Pin|c12_Pin|b12_Pin|g12_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	f44f 511e 	mov.w	r1, #10112	; 0x2780
 8000718:	482b      	ldr	r0, [pc, #172]	; (80007c8 <display7SEG12+0x144>)
 800071a:	f001 fa50 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, f12_Pin|e12_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000724:	4828      	ldr	r0, [pc, #160]	; (80007c8 <display7SEG12+0x144>)
 8000726:	f001 fa4a 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 800072a:	e048      	b.n	80007be <display7SEG12+0x13a>
	case 4:
		HAL_GPIO_WritePin(GPIOA, b12_Pin|c12_Pin|f12_Pin|g12_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8000732:	4825      	ldr	r0, [pc, #148]	; (80007c8 <display7SEG12+0x144>)
 8000734:	f001 fa43 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, a12_Pin|e12_Pin|d12_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800073e:	4822      	ldr	r0, [pc, #136]	; (80007c8 <display7SEG12+0x144>)
 8000740:	f001 fa3d 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000744:	e03b      	b.n	80007be <display7SEG12+0x13a>
	case 5:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|c12_Pin|d12_Pin|f12_Pin|g12_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 515a 	mov.w	r1, #13952	; 0x3680
 800074c:	481e      	ldr	r0, [pc, #120]	; (80007c8 <display7SEG12+0x144>)
 800074e:	f001 fa36 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b12_Pin|e12_Pin, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8000758:	481b      	ldr	r0, [pc, #108]	; (80007c8 <display7SEG12+0x144>)
 800075a:	f001 fa30 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 800075e:	e02e      	b.n	80007be <display7SEG12+0x13a>
	case 6:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|c12_Pin|d12_Pin|e12_Pin|f12_Pin|g12_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <display7SEG12+0x144>)
 8000768:	f001 fa29 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, b12_Pin, GPIO_PIN_SET);
 800076c:	2201      	movs	r2, #1
 800076e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000772:	4815      	ldr	r0, [pc, #84]	; (80007c8 <display7SEG12+0x144>)
 8000774:	f001 fa23 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000778:	e021      	b.n	80007be <display7SEG12+0x13a>
	case 7:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|b12_Pin|c12_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <display7SEG12+0x144>)
 8000782:	f001 fa1c 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, f12_Pin|d12_Pin|e12_Pin|g11_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 800078c:	480e      	ldr	r0, [pc, #56]	; (80007c8 <display7SEG12+0x144>)
 800078e:	f001 fa16 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000792:	e014      	b.n	80007be <display7SEG12+0x13a>
	case 8:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|b12_Pin|c12_Pin|f12_Pin|d12_Pin|e12_Pin|g12_Pin, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 517e 	mov.w	r1, #16256	; 0x3f80
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <display7SEG12+0x144>)
 800079c:	f001 fa0f 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80007a0:	e00d      	b.n	80007be <display7SEG12+0x13a>
	case 9:
		HAL_GPIO_WritePin(GPIOA, a12_Pin|b12_Pin|c12_Pin|f12_Pin|d12_Pin|g12_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 515e 	mov.w	r1, #14208	; 0x3780
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <display7SEG12+0x144>)
 80007aa:	f001 fa08 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, e12_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <display7SEG12+0x144>)
 80007b6:	f001 fa02 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80007ba:	e000      	b.n	80007be <display7SEG12+0x13a>
	default: break;
 80007bc:	bf00      	nop
	}
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	.word	0x40010800

080007cc <display7SEG22>:

void display7SEG22(int num)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b09      	cmp	r3, #9
 80007d8:	f200 80c7 	bhi.w	800096a <display7SEG22+0x19e>
 80007dc:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <display7SEG22+0x18>)
 80007de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e2:	bf00      	nop
 80007e4:	0800080d 	.word	0x0800080d
 80007e8:	08000827 	.word	0x08000827
 80007ec:	0800084b 	.word	0x0800084b
 80007f0:	08000871 	.word	0x08000871
 80007f4:	08000897 	.word	0x08000897
 80007f8:	080008bd 	.word	0x080008bd
 80007fc:	080008e3 	.word	0x080008e3
 8000800:	08000907 	.word	0x08000907
 8000804:	0800092b 	.word	0x0800092b
 8000808:	08000945 	.word	0x08000945
	switch(num)
	{
	case 0:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|b22_Pin|c22_Pin|d22_Pin|e22_Pin|f22_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000812:	4858      	ldr	r0, [pc, #352]	; (8000974 <display7SEG22+0x1a8>)
 8000814:	f001 f9d3 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800081e:	4855      	ldr	r0, [pc, #340]	; (8000974 <display7SEG22+0x1a8>)
 8000820:	f001 f9cd 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000824:	e0a2      	b.n	800096c <display7SEG22+0x1a0>
	case 1:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|d22_Pin|e22_Pin|f22_Pin, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 800082c:	4851      	ldr	r0, [pc, #324]	; (8000974 <display7SEG22+0x1a8>)
 800082e:	f001 f9c6 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000838:	484e      	ldr	r0, [pc, #312]	; (8000974 <display7SEG22+0x1a8>)
 800083a:	f001 f9c0 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, b22_Pin|c22_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	21c0      	movs	r1, #192	; 0xc0
 8000842:	484c      	ldr	r0, [pc, #304]	; (8000974 <display7SEG22+0x1a8>)
 8000844:	f001 f9bb 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000848:	e090      	b.n	800096c <display7SEG22+0x1a0>
	case 2:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|d22_Pin|e22_Pin|b22_Pin, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 7158 	mov.w	r1, #864	; 0x360
 8000850:	4848      	ldr	r0, [pc, #288]	; (8000974 <display7SEG22+0x1a8>)
 8000852:	f001 f9b4 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800085c:	4845      	ldr	r0, [pc, #276]	; (8000974 <display7SEG22+0x1a8>)
 800085e:	f001 f9ae 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, f22_Pin|c22_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 6190 	mov.w	r1, #1152	; 0x480
 8000868:	4842      	ldr	r0, [pc, #264]	; (8000974 <display7SEG22+0x1a8>)
 800086a:	f001 f9a8 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 800086e:	e07d      	b.n	800096c <display7SEG22+0x1a0>
	case 3:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|d22_Pin|c22_Pin|b22_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000876:	483f      	ldr	r0, [pc, #252]	; (8000974 <display7SEG22+0x1a8>)
 8000878:	f001 f9a1 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000882:	483c      	ldr	r0, [pc, #240]	; (8000974 <display7SEG22+0x1a8>)
 8000884:	f001 f99b 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, f22_Pin|e22_Pin, GPIO_PIN_SET);
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800088e:	4839      	ldr	r0, [pc, #228]	; (8000974 <display7SEG22+0x1a8>)
 8000890:	f001 f995 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000894:	e06a      	b.n	800096c <display7SEG22+0x1a0>
	case 4:
		HAL_GPIO_WritePin(GPIOB, b22_Pin|c22_Pin|f22_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
 800089c:	4835      	ldr	r0, [pc, #212]	; (8000974 <display7SEG22+0x1a8>)
 800089e:	f001 f98e 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a8:	4832      	ldr	r0, [pc, #200]	; (8000974 <display7SEG22+0x1a8>)
 80008aa:	f001 f988 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, a22_Pin|e22_Pin|d22_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 7148 	mov.w	r1, #800	; 0x320
 80008b4:	482f      	ldr	r0, [pc, #188]	; (8000974 <display7SEG22+0x1a8>)
 80008b6:	f001 f982 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80008ba:	e057      	b.n	800096c <display7SEG22+0x1a0>
	case 5:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|c22_Pin|d22_Pin|f22_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 80008c2:	482c      	ldr	r0, [pc, #176]	; (8000974 <display7SEG22+0x1a8>)
 80008c4:	f001 f97b 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ce:	4829      	ldr	r0, [pc, #164]	; (8000974 <display7SEG22+0x1a8>)
 80008d0:	f001 f975 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, b22_Pin|e22_Pin, GPIO_PIN_SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80008da:	4826      	ldr	r0, [pc, #152]	; (8000974 <display7SEG22+0x1a8>)
 80008dc:	f001 f96f 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 80008e0:	e044      	b.n	800096c <display7SEG22+0x1a0>
	case 6:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|c22_Pin|d22_Pin|e22_Pin|f22_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 80008e8:	4822      	ldr	r0, [pc, #136]	; (8000974 <display7SEG22+0x1a8>)
 80008ea:	f001 f968 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f4:	481f      	ldr	r0, [pc, #124]	; (8000974 <display7SEG22+0x1a8>)
 80008f6:	f001 f962 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, b22_Pin, GPIO_PIN_SET);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2140      	movs	r1, #64	; 0x40
 80008fe:	481d      	ldr	r0, [pc, #116]	; (8000974 <display7SEG22+0x1a8>)
 8000900:	f001 f95d 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000904:	e032      	b.n	800096c <display7SEG22+0x1a0>
	case 7:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|b22_Pin|c22_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	21e0      	movs	r1, #224	; 0xe0
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <display7SEG22+0x1a8>)
 800090c:	f001 f957 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, f22_Pin|d22_Pin|e22_Pin, GPIO_PIN_SET);
 8000910:	2201      	movs	r2, #1
 8000912:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000916:	4817      	ldr	r0, [pc, #92]	; (8000974 <display7SEG22+0x1a8>)
 8000918:	f001 f951 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_SET);
 800091c:	2201      	movs	r2, #1
 800091e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <display7SEG22+0x1a8>)
 8000924:	f001 f94b 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000928:	e020      	b.n	800096c <display7SEG22+0x1a0>
	case 8:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|b22_Pin|c22_Pin|f22_Pin|d22_Pin|e22_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <display7SEG22+0x1a8>)
 8000932:	f001 f944 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_RESET);
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <display7SEG22+0x1a8>)
 800093e:	f001 f93e 	bl	8001bbe <HAL_GPIO_WritePin>

		break;
 8000942:	e013      	b.n	800096c <display7SEG22+0x1a0>
	case 9:
		HAL_GPIO_WritePin(GPIOB, a22_Pin|b22_Pin|c22_Pin|f22_Pin|d22_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800094a:	480a      	ldr	r0, [pc, #40]	; (8000974 <display7SEG22+0x1a8>)
 800094c:	f001 f937 	bl	8001bbe <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g22_GPIO_Port, g22_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	4807      	ldr	r0, [pc, #28]	; (8000974 <display7SEG22+0x1a8>)
 8000958:	f001 f931 	bl	8001bbe <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, e22_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000962:	4804      	ldr	r0, [pc, #16]	; (8000974 <display7SEG22+0x1a8>)
 8000964:	f001 f92b 	bl	8001bbe <HAL_GPIO_WritePin>
		break;
 8000968:	e000      	b.n	800096c <display7SEG22+0x1a0>
	default: break;
 800096a:	bf00      	nop
	}
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40010c00 	.word	0x40010c00

08000978 <fsm_automatic_run>:

int status,counter,counterred,counteryellow,countergreen;
int led1=0,led2=2,dem1=0,dem2=0;

void fsm_automatic_run()
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	switch(status)
 800097c:	4b9e      	ldr	r3, [pc, #632]	; (8000bf8 <fsm_automatic_run+0x280>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	2b04      	cmp	r3, #4
 8000984:	f200 8383 	bhi.w	800108e <fsm_automatic_run+0x716>
 8000988:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <fsm_automatic_run+0x18>)
 800098a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800098e:	bf00      	nop
 8000990:	080009a5 	.word	0x080009a5
 8000994:	080009d1 	.word	0x080009d1
 8000998:	08000e0d 	.word	0x08000e0d
 800099c:	08000f09 	.word	0x08000f09
 80009a0:	08000fcd 	.word	0x08000fcd
	{
	case INIT:
		status=normal;
 80009a4:	4b94      	ldr	r3, [pc, #592]	; (8000bf8 <fsm_automatic_run+0x280>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	601a      	str	r2, [r3, #0]
		settimer1(100);
 80009aa:	2064      	movs	r0, #100	; 0x64
 80009ac:	f000 fd90 	bl	80014d0 <settimer1>
		settimer2(100);
 80009b0:	2064      	movs	r0, #100	; 0x64
 80009b2:	f000 fda1 	bl	80014f8 <settimer2>
		led1=0;
 80009b6:	4b91      	ldr	r3, [pc, #580]	; (8000bfc <fsm_automatic_run+0x284>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
		led2=2;
 80009bc:	4b90      	ldr	r3, [pc, #576]	; (8000c00 <fsm_automatic_run+0x288>)
 80009be:	2202      	movs	r2, #2
 80009c0:	601a      	str	r2, [r3, #0]
		dem1=0;
 80009c2:	4b90      	ldr	r3, [pc, #576]	; (8000c04 <fsm_automatic_run+0x28c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
		dem2=0;
 80009c8:	4b8f      	ldr	r3, [pc, #572]	; (8000c08 <fsm_automatic_run+0x290>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
		break;
 80009ce:	e365      	b.n	800109c <fsm_automatic_run+0x724>

	case normal:

		if(mode()==1)
 80009d0:	f7ff fbbc 	bl	800014c <mode>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d107      	bne.n	80009ea <fsm_automatic_run+0x72>
		{
			status=modify_red;
 80009da:	4b87      	ldr	r3, [pc, #540]	; (8000bf8 <fsm_automatic_run+0x280>)
 80009dc:	2203      	movs	r2, #3
 80009de:	601a      	str	r2, [r3, #0]
			counter=counterred;
 80009e0:	4b8a      	ldr	r3, [pc, #552]	; (8000c0c <fsm_automatic_run+0x294>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a8a      	ldr	r2, [pc, #552]	; (8000c10 <fsm_automatic_run+0x298>)
 80009e6:	6013      	str	r3, [r2, #0]
			break;
 80009e8:	e358      	b.n	800109c <fsm_automatic_run+0x724>
		}
		switch (led1)
 80009ea:	4b84      	ldr	r3, [pc, #528]	; (8000bfc <fsm_automatic_run+0x284>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	f000 80a1 	beq.w	8000b36 <fsm_automatic_run+0x1be>
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	f300 80ea 	bgt.w	8000bce <fsm_automatic_run+0x256>
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <fsm_automatic_run+0x8c>
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d04d      	beq.n	8000a9e <fsm_automatic_run+0x126>
		  	  	  	  	  		  		  		  	  	  	  	  		  {
		  	  	  	  	  		  		  		  	  	  	  	  			  dem1++;
		  	  	  	  	  		  		  		  	  	  	  	  			  settimer1(100);
		  	  	  	  	  		  		  		  	  	  	  	  		  }
		  	  	  	  	  		  		  break;
		  	  	  	  	  	  default: break;
 8000a02:	e0e4      	b.n	8000bce <fsm_automatic_run+0x256>
		  	  	  	  	  		  display7SEG11((counterred-dem1)/10);
 8000a04:	4b81      	ldr	r3, [pc, #516]	; (8000c0c <fsm_automatic_run+0x294>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b7e      	ldr	r3, [pc, #504]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4a81      	ldr	r2, [pc, #516]	; (8000c14 <fsm_automatic_run+0x29c>)
 8000a10:	fb82 1203 	smull	r1, r2, r2, r3
 8000a14:	1092      	asrs	r2, r2, #2
 8000a16:	17db      	asrs	r3, r3, #31
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fcc2 	bl	80003a4 <display7SEG11>
		  	  	  	  	  		  display7SEG12((counterred-dem1)%10);
 8000a20:	4b7a      	ldr	r3, [pc, #488]	; (8000c0c <fsm_automatic_run+0x294>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b77      	ldr	r3, [pc, #476]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	1ad2      	subs	r2, r2, r3
 8000a2a:	4b7a      	ldr	r3, [pc, #488]	; (8000c14 <fsm_automatic_run+0x29c>)
 8000a2c:	fb83 1302 	smull	r1, r3, r3, r2
 8000a30:	1099      	asrs	r1, r3, #2
 8000a32:	17d3      	asrs	r3, r2, #31
 8000a34:	1ac9      	subs	r1, r1, r3
 8000a36:	460b      	mov	r3, r1
 8000a38:	009b      	lsls	r3, r3, #2
 8000a3a:	440b      	add	r3, r1
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	1ad1      	subs	r1, r2, r3
 8000a40:	4608      	mov	r0, r1
 8000a42:	f7ff fe1f 	bl	8000684 <display7SEG12>
		  	  	  	  	  		  if (dem1>=counterred)
 8000a46:	4b6f      	ldr	r3, [pc, #444]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	4b70      	ldr	r3, [pc, #448]	; (8000c0c <fsm_automatic_run+0x294>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	429a      	cmp	r2, r3
 8000a50:	db06      	blt.n	8000a60 <fsm_automatic_run+0xe8>
		  	  	  	  	  			  led1=2;
 8000a52:	4b6a      	ldr	r3, [pc, #424]	; (8000bfc <fsm_automatic_run+0x284>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	601a      	str	r2, [r3, #0]
		  	  	  	  	  			  dem1=0;
 8000a58:	4b6a      	ldr	r3, [pc, #424]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
		  	  	  	  	  			  break;
 8000a5e:	e0bd      	b.n	8000bdc <fsm_automatic_run+0x264>
		  	  	  	  	  		  HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2102      	movs	r1, #2
 8000a64:	486c      	ldr	r0, [pc, #432]	; (8000c18 <fsm_automatic_run+0x2a0>)
 8000a66:	f001 f8aa 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  		  HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , 1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	486a      	ldr	r0, [pc, #424]	; (8000c1c <fsm_automatic_run+0x2a4>)
 8000a72:	f001 f8a4 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  		  HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , 1);
 8000a76:	2201      	movs	r2, #1
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4867      	ldr	r0, [pc, #412]	; (8000c1c <fsm_automatic_run+0x2a4>)
 8000a7e:	f001 f89e 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  		  if (timer1_flag==1)
 8000a82:	4b67      	ldr	r3, [pc, #412]	; (8000c20 <fsm_automatic_run+0x2a8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	f040 80a3 	bne.w	8000bd2 <fsm_automatic_run+0x25a>
		  	  	  	  	  			  dem1++;
 8000a8c:	4b5d      	ldr	r3, [pc, #372]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	3301      	adds	r3, #1
 8000a92:	4a5c      	ldr	r2, [pc, #368]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000a94:	6013      	str	r3, [r2, #0]
		  	  	  	  	  			  settimer1(100);
 8000a96:	2064      	movs	r0, #100	; 0x64
 8000a98:	f000 fd1a 	bl	80014d0 <settimer1>
		  	  	  	  	  		  break;
 8000a9c:	e099      	b.n	8000bd2 <fsm_automatic_run+0x25a>
		  	  	  	  	  		  	  display7SEG11((counteryellow-dem1)/10);
 8000a9e:	4b61      	ldr	r3, [pc, #388]	; (8000c24 <fsm_automatic_run+0x2ac>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	4a5a      	ldr	r2, [pc, #360]	; (8000c14 <fsm_automatic_run+0x29c>)
 8000aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8000aae:	1092      	asrs	r2, r2, #2
 8000ab0:	17db      	asrs	r3, r3, #31
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fc75 	bl	80003a4 <display7SEG11>
		  	  	  	  	  		  	  display7SEG12((counteryellow-dem1)%10);
 8000aba:	4b5a      	ldr	r3, [pc, #360]	; (8000c24 <fsm_automatic_run+0x2ac>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	1ad2      	subs	r2, r2, r3
 8000ac4:	4b53      	ldr	r3, [pc, #332]	; (8000c14 <fsm_automatic_run+0x29c>)
 8000ac6:	fb83 1302 	smull	r1, r3, r3, r2
 8000aca:	1099      	asrs	r1, r3, #2
 8000acc:	17d3      	asrs	r3, r2, #31
 8000ace:	1ac9      	subs	r1, r1, r3
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	1ad1      	subs	r1, r2, r3
 8000ada:	4608      	mov	r0, r1
 8000adc:	f7ff fdd2 	bl	8000684 <display7SEG12>
		  	  	  	  	  		  if (dem1>=counteryellow)
 8000ae0:	4b48      	ldr	r3, [pc, #288]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b4f      	ldr	r3, [pc, #316]	; (8000c24 <fsm_automatic_run+0x2ac>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	db06      	blt.n	8000afa <fsm_automatic_run+0x182>
		  	  	  	  	  			  led1=0;
 8000aec:	4b43      	ldr	r3, [pc, #268]	; (8000bfc <fsm_automatic_run+0x284>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
		  	  	  	  	  			  dem1=0;
 8000af2:	4b44      	ldr	r3, [pc, #272]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
		  	  	  	  	  			  break;
 8000af8:	e070      	b.n	8000bdc <fsm_automatic_run+0x264>
		  	  	  	  	  		HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2102      	movs	r1, #2
 8000afe:	4846      	ldr	r0, [pc, #280]	; (8000c18 <fsm_automatic_run+0x2a0>)
 8000b00:	f001 f85d 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  			  	  		  HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , 0);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0a:	4844      	ldr	r0, [pc, #272]	; (8000c1c <fsm_automatic_run+0x2a4>)
 8000b0c:	f001 f857 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  			  	  		  HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , 1);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b16:	4841      	ldr	r0, [pc, #260]	; (8000c1c <fsm_automatic_run+0x2a4>)
 8000b18:	f001 f851 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  			  	if (timer1_flag==1)
 8000b1c:	4b40      	ldr	r3, [pc, #256]	; (8000c20 <fsm_automatic_run+0x2a8>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d158      	bne.n	8000bd6 <fsm_automatic_run+0x25e>
		  	  	  	  	  			  			  	  	  	  	  			  dem1++;
 8000b24:	4b37      	ldr	r3, [pc, #220]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a36      	ldr	r2, [pc, #216]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000b2c:	6013      	str	r3, [r2, #0]
		  	  	  	  	  			  			  	  	  	  	  			  settimer1(100);
 8000b2e:	2064      	movs	r0, #100	; 0x64
 8000b30:	f000 fcce 	bl	80014d0 <settimer1>
		  	  	  	  	  		  break;
 8000b34:	e04f      	b.n	8000bd6 <fsm_automatic_run+0x25e>
		  	  	  	  	  display7SEG11((countergreen-dem1)/10);
 8000b36:	4b3c      	ldr	r3, [pc, #240]	; (8000c28 <fsm_automatic_run+0x2b0>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1ad3      	subs	r3, r2, r3
 8000b40:	4a34      	ldr	r2, [pc, #208]	; (8000c14 <fsm_automatic_run+0x29c>)
 8000b42:	fb82 1203 	smull	r1, r2, r2, r3
 8000b46:	1092      	asrs	r2, r2, #2
 8000b48:	17db      	asrs	r3, r3, #31
 8000b4a:	1ad3      	subs	r3, r2, r3
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff fc29 	bl	80003a4 <display7SEG11>
		  	  	  	  	  		  	  	  	  	  		  display7SEG12((countergreen-dem1)%10);
 8000b52:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <fsm_automatic_run+0x2b0>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1ad2      	subs	r2, r2, r3
 8000b5c:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <fsm_automatic_run+0x29c>)
 8000b5e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b62:	1099      	asrs	r1, r3, #2
 8000b64:	17d3      	asrs	r3, r2, #31
 8000b66:	1ac9      	subs	r1, r1, r3
 8000b68:	460b      	mov	r3, r1
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	1ad1      	subs	r1, r2, r3
 8000b72:	4608      	mov	r0, r1
 8000b74:	f7ff fd86 	bl	8000684 <display7SEG12>
		  	  	  	  	  		  		  if (dem1>=countergreen)
 8000b78:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b2a      	ldr	r3, [pc, #168]	; (8000c28 <fsm_automatic_run+0x2b0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	db06      	blt.n	8000b92 <fsm_automatic_run+0x21a>
		  	  	  	  	  		  			  led1=1;
 8000b84:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <fsm_automatic_run+0x284>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	601a      	str	r2, [r3, #0]
		  	  	  	  	  		  			  dem1=0;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  		  			  break;
 8000b90:	e024      	b.n	8000bdc <fsm_automatic_run+0x264>
		  	  	  	  	  		  	HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , 1);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2102      	movs	r1, #2
 8000b96:	4820      	ldr	r0, [pc, #128]	; (8000c18 <fsm_automatic_run+0x2a0>)
 8000b98:	f001 f811 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  		  		  	  		  HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba2:	481e      	ldr	r0, [pc, #120]	; (8000c1c <fsm_automatic_run+0x2a4>)
 8000ba4:	f001 f80b 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  		  		  	  		  HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , 0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bae:	481b      	ldr	r0, [pc, #108]	; (8000c1c <fsm_automatic_run+0x2a4>)
 8000bb0:	f001 f805 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  		  		  if (timer1_flag==1)
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <fsm_automatic_run+0x2a8>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d10e      	bne.n	8000bda <fsm_automatic_run+0x262>
		  	  	  	  	  		  		  		  	  	  	  	  			  dem1++;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <fsm_automatic_run+0x28c>)
 8000bc4:	6013      	str	r3, [r2, #0]
		  	  	  	  	  		  		  		  	  	  	  	  			  settimer1(100);
 8000bc6:	2064      	movs	r0, #100	; 0x64
 8000bc8:	f000 fc82 	bl	80014d0 <settimer1>
		  	  	  	  	  		  		  break;
 8000bcc:	e005      	b.n	8000bda <fsm_automatic_run+0x262>
		  	  	  	  	  	  default: break;
 8000bce:	bf00      	nop
 8000bd0:	e004      	b.n	8000bdc <fsm_automatic_run+0x264>
		  	  	  	  	  		  break;
 8000bd2:	bf00      	nop
 8000bd4:	e002      	b.n	8000bdc <fsm_automatic_run+0x264>
		  	  	  	  	  		  break;
 8000bd6:	bf00      	nop
 8000bd8:	e000      	b.n	8000bdc <fsm_automatic_run+0x264>
		  	  	  	  	  		  		  break;
 8000bda:	bf00      	nop
		  	  	  	  	  	  }

		  	   switch (led2)
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <fsm_automatic_run+0x288>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b02      	cmp	r3, #2
 8000be2:	f000 80be 	beq.w	8000d62 <fsm_automatic_run+0x3ea>
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	f300 8108 	bgt.w	8000dfc <fsm_automatic_run+0x484>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d01d      	beq.n	8000c2c <fsm_automatic_run+0x2b4>
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d069      	beq.n	8000cc8 <fsm_automatic_run+0x350>
		  	  	  	  	  	  		  		  	{
		  	  	  	  	  	  		  		  			  	  	  	  	  			  	  	  	  	  			  dem2++;
		  	  	  	  	  	  		  		  			  	  	  	  	  			  	  	  	  	  			  settimer2(100);
		  	  	  	  	  	  		  		  			  	  	  	  	  			  	  	  	  	  		  }
		  	  	  	  	  	  		  		  break;
		  	  	  	  	  	  	  default: break;
 8000bf4:	e102      	b.n	8000dfc <fsm_automatic_run+0x484>
 8000bf6:	bf00      	nop
 8000bf8:	2000008c 	.word	0x2000008c
 8000bfc:	20000080 	.word	0x20000080
 8000c00:	2000003c 	.word	0x2000003c
 8000c04:	20000084 	.word	0x20000084
 8000c08:	20000088 	.word	0x20000088
 8000c0c:	20000040 	.word	0x20000040
 8000c10:	20000090 	.word	0x20000090
 8000c14:	66666667 	.word	0x66666667
 8000c18:	40011400 	.word	0x40011400
 8000c1c:	40010c00 	.word	0x40010c00
 8000c20:	20000098 	.word	0x20000098
 8000c24:	20000044 	.word	0x20000044
 8000c28:	20000048 	.word	0x20000048
		  	  	  	  	  	display7SEG21((counterred-dem2)/10);
 8000c2c:	4ba9      	ldr	r3, [pc, #676]	; (8000ed4 <fsm_automatic_run+0x55c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4ba9      	ldr	r3, [pc, #676]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	4aa9      	ldr	r2, [pc, #676]	; (8000edc <fsm_automatic_run+0x564>)
 8000c38:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3c:	1092      	asrs	r2, r2, #2
 8000c3e:	17db      	asrs	r3, r3, #31
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fc3c 	bl	80004c0 <display7SEG21>
		  	  	  	  	  	display7SEG22((counterred-dem2)%10);
 8000c48:	4ba2      	ldr	r3, [pc, #648]	; (8000ed4 <fsm_automatic_run+0x55c>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4ba2      	ldr	r3, [pc, #648]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	1ad2      	subs	r2, r2, r3
 8000c52:	4ba2      	ldr	r3, [pc, #648]	; (8000edc <fsm_automatic_run+0x564>)
 8000c54:	fb83 1302 	smull	r1, r3, r3, r2
 8000c58:	1099      	asrs	r1, r3, #2
 8000c5a:	17d3      	asrs	r3, r2, #31
 8000c5c:	1ac9      	subs	r1, r1, r3
 8000c5e:	460b      	mov	r3, r1
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	440b      	add	r3, r1
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	1ad1      	subs	r1, r2, r3
 8000c68:	4608      	mov	r0, r1
 8000c6a:	f7ff fdaf 	bl	80007cc <display7SEG22>
		  	  	  	  	  	  		  if (dem2>=counterred)
 8000c6e:	4b9a      	ldr	r3, [pc, #616]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b98      	ldr	r3, [pc, #608]	; (8000ed4 <fsm_automatic_run+0x55c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	db06      	blt.n	8000c88 <fsm_automatic_run+0x310>
		  	  	  	  	  	  			  led2=2;
 8000c7a:	4b99      	ldr	r3, [pc, #612]	; (8000ee0 <fsm_automatic_run+0x568>)
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	601a      	str	r2, [r3, #0]
		  	  	  	  	  	  			  dem2=0;
 8000c80:	4b95      	ldr	r3, [pc, #596]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
		  	  	  	  	  	  			  break;
 8000c86:	e0c0      	b.n	8000e0a <fsm_automatic_run+0x492>
		  	  	  	  	  	  		  HAL_GPIO_WritePin ( LED_RED2_GPIO_Port , LED_RED2_Pin , 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c8e:	4895      	ldr	r0, [pc, #596]	; (8000ee4 <fsm_automatic_run+0x56c>)
 8000c90:	f000 ff95 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	  		  HAL_GPIO_WritePin ( LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin , 1);
 8000c94:	2201      	movs	r2, #1
 8000c96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c9a:	4892      	ldr	r0, [pc, #584]	; (8000ee4 <fsm_automatic_run+0x56c>)
 8000c9c:	f000 ff8f 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	  		  HAL_GPIO_WritePin ( LED_GREEN2_GPIO_Port , LED_GREEN2_Pin , 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	4890      	ldr	r0, [pc, #576]	; (8000ee8 <fsm_automatic_run+0x570>)
 8000ca8:	f000 ff89 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	if (timer2_flag==1)
 8000cac:	4b8f      	ldr	r3, [pc, #572]	; (8000eec <fsm_automatic_run+0x574>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	f040 80a5 	bne.w	8000e00 <fsm_automatic_run+0x488>
		  	  	  	  	  			  	  	  	  	  			  dem2++;
 8000cb6:	4b88      	ldr	r3, [pc, #544]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	4a86      	ldr	r2, [pc, #536]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000cbe:	6013      	str	r3, [r2, #0]
		  	  	  	  	  			  	  	  	  	  			  settimer2(100);
 8000cc0:	2064      	movs	r0, #100	; 0x64
 8000cc2:	f000 fc19 	bl	80014f8 <settimer2>
		  	  	  	  	  	  		  break;
 8000cc6:	e09b      	b.n	8000e00 <fsm_automatic_run+0x488>
		  	  	  	  	  	  		  display7SEG21((counteryellow-dem2)/10);
 8000cc8:	4b89      	ldr	r3, [pc, #548]	; (8000ef0 <fsm_automatic_run+0x578>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b82      	ldr	r3, [pc, #520]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	4a82      	ldr	r2, [pc, #520]	; (8000edc <fsm_automatic_run+0x564>)
 8000cd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd8:	1092      	asrs	r2, r2, #2
 8000cda:	17db      	asrs	r3, r3, #31
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fbee 	bl	80004c0 <display7SEG21>
		  	  	  	  	  			  	  	  	  	  	display7SEG22((counteryellow-dem2)%10);
 8000ce4:	4b82      	ldr	r3, [pc, #520]	; (8000ef0 <fsm_automatic_run+0x578>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b7b      	ldr	r3, [pc, #492]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	1ad2      	subs	r2, r2, r3
 8000cee:	4b7b      	ldr	r3, [pc, #492]	; (8000edc <fsm_automatic_run+0x564>)
 8000cf0:	fb83 1302 	smull	r1, r3, r3, r2
 8000cf4:	1099      	asrs	r1, r3, #2
 8000cf6:	17d3      	asrs	r3, r2, #31
 8000cf8:	1ac9      	subs	r1, r1, r3
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	440b      	add	r3, r1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	1ad1      	subs	r1, r2, r3
 8000d04:	4608      	mov	r0, r1
 8000d06:	f7ff fd61 	bl	80007cc <display7SEG22>
		  	  	  	  	  	  		  if (dem2>=counteryellow)
 8000d0a:	4b73      	ldr	r3, [pc, #460]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	4b78      	ldr	r3, [pc, #480]	; (8000ef0 <fsm_automatic_run+0x578>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	db06      	blt.n	8000d24 <fsm_automatic_run+0x3ac>
		  	  	  	  	  	  			  led2=0;
 8000d16:	4b72      	ldr	r3, [pc, #456]	; (8000ee0 <fsm_automatic_run+0x568>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
		  	  	  	  	  	  			  dem2=0;
 8000d1c:	4b6e      	ldr	r3, [pc, #440]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
		  	  	  	  	  	  			  break;
 8000d22:	e072      	b.n	8000e0a <fsm_automatic_run+0x492>
		  	  	  	  	  	  	HAL_GPIO_WritePin ( LED_RED2_GPIO_Port , LED_RED2_Pin , 1);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d2a:	486e      	ldr	r0, [pc, #440]	; (8000ee4 <fsm_automatic_run+0x56c>)
 8000d2c:	f000 ff47 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	  		  	  	  		  HAL_GPIO_WritePin ( LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin , 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d36:	486b      	ldr	r0, [pc, #428]	; (8000ee4 <fsm_automatic_run+0x56c>)
 8000d38:	f000 ff41 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	  		  	  	  		  HAL_GPIO_WritePin ( LED_GREEN2_GPIO_Port , LED_GREEN2_Pin , 1);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d42:	4869      	ldr	r0, [pc, #420]	; (8000ee8 <fsm_automatic_run+0x570>)
 8000d44:	f000 ff3b 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	  		  	if (timer2_flag==1)
 8000d48:	4b68      	ldr	r3, [pc, #416]	; (8000eec <fsm_automatic_run+0x574>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d159      	bne.n	8000e04 <fsm_automatic_run+0x48c>
		  	  	  	  	  	  		  			  	  	  	  	  			  	  	  	  	  			  dem2++;
 8000d50:	4b61      	ldr	r3, [pc, #388]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3301      	adds	r3, #1
 8000d56:	4a60      	ldr	r2, [pc, #384]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000d58:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  		  			  	  	  	  	  			  	  	  	  	  			  settimer2(100);
 8000d5a:	2064      	movs	r0, #100	; 0x64
 8000d5c:	f000 fbcc 	bl	80014f8 <settimer2>
		  	  	  	  	  	  		  break;
 8000d60:	e050      	b.n	8000e04 <fsm_automatic_run+0x48c>
		  	  	  	  	  	display7SEG21((countergreen-dem2)/10);
 8000d62:	4b64      	ldr	r3, [pc, #400]	; (8000ef4 <fsm_automatic_run+0x57c>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	4a5b      	ldr	r2, [pc, #364]	; (8000edc <fsm_automatic_run+0x564>)
 8000d6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d72:	1092      	asrs	r2, r2, #2
 8000d74:	17db      	asrs	r3, r3, #31
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff fba1 	bl	80004c0 <display7SEG21>
		  	  	  	  	  	display7SEG22((countergreen-dem2)%10);
 8000d7e:	4b5d      	ldr	r3, [pc, #372]	; (8000ef4 <fsm_automatic_run+0x57c>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b55      	ldr	r3, [pc, #340]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	1ad2      	subs	r2, r2, r3
 8000d88:	4b54      	ldr	r3, [pc, #336]	; (8000edc <fsm_automatic_run+0x564>)
 8000d8a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d8e:	1099      	asrs	r1, r3, #2
 8000d90:	17d3      	asrs	r3, r2, #31
 8000d92:	1ac9      	subs	r1, r1, r3
 8000d94:	460b      	mov	r3, r1
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	440b      	add	r3, r1
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	1ad1      	subs	r1, r2, r3
 8000d9e:	4608      	mov	r0, r1
 8000da0:	f7ff fd14 	bl	80007cc <display7SEG22>
		  	  	  	  	  	  		  		  if (dem2>=countergreen)
 8000da4:	4b4c      	ldr	r3, [pc, #304]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b52      	ldr	r3, [pc, #328]	; (8000ef4 <fsm_automatic_run+0x57c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	db06      	blt.n	8000dbe <fsm_automatic_run+0x446>
		  	  	  	  	  	  		  			  led2=1;
 8000db0:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <fsm_automatic_run+0x568>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	601a      	str	r2, [r3, #0]
		  	  	  	  	  	  		  			  dem2=0;
 8000db6:	4b48      	ldr	r3, [pc, #288]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
		  	  	  	  	  	  		  			  break;
 8000dbc:	e025      	b.n	8000e0a <fsm_automatic_run+0x492>
		  	  	  	  	  	  		  	HAL_GPIO_WritePin ( LED_RED2_GPIO_Port , LED_RED2_Pin , 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc4:	4847      	ldr	r0, [pc, #284]	; (8000ee4 <fsm_automatic_run+0x56c>)
 8000dc6:	f000 fefa 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	  		  		  	  	  		  HAL_GPIO_WritePin ( LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin , 1);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dd0:	4844      	ldr	r0, [pc, #272]	; (8000ee4 <fsm_automatic_run+0x56c>)
 8000dd2:	f000 fef4 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	  		  		  	  	  		  HAL_GPIO_WritePin ( LED_GREEN2_GPIO_Port , LED_GREEN2_Pin , 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ddc:	4842      	ldr	r0, [pc, #264]	; (8000ee8 <fsm_automatic_run+0x570>)
 8000dde:	f000 feee 	bl	8001bbe <HAL_GPIO_WritePin>
		  	  	  	  	  	  		  		  	if (timer2_flag==1)
 8000de2:	4b42      	ldr	r3, [pc, #264]	; (8000eec <fsm_automatic_run+0x574>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d10e      	bne.n	8000e08 <fsm_automatic_run+0x490>
		  	  	  	  	  	  		  		  			  	  	  	  	  			  	  	  	  	  			  dem2++;
 8000dea:	4b3b      	ldr	r3, [pc, #236]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4a39      	ldr	r2, [pc, #228]	; (8000ed8 <fsm_automatic_run+0x560>)
 8000df2:	6013      	str	r3, [r2, #0]
		  	  	  	  	  	  		  		  			  	  	  	  	  			  	  	  	  	  			  settimer2(100);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fb7f 	bl	80014f8 <settimer2>
		  	  	  	  	  	  		  		  break;
 8000dfa:	e005      	b.n	8000e08 <fsm_automatic_run+0x490>
		  	  	  	  	  	  	  default: break;
 8000dfc:	bf00      	nop
 8000dfe:	e14d      	b.n	800109c <fsm_automatic_run+0x724>
		  	  	  	  	  	  		  break;
 8000e00:	bf00      	nop
 8000e02:	e14b      	b.n	800109c <fsm_automatic_run+0x724>
		  	  	  	  	  	  		  break;
 8000e04:	bf00      	nop
 8000e06:	e149      	b.n	800109c <fsm_automatic_run+0x724>
		  	  	  	  	  	  		  		  break;
 8000e08:	bf00      	nop
		  	  	  	  	  	  	  }


		break;
 8000e0a:	e147      	b.n	800109c <fsm_automatic_run+0x724>

	case modify_red:
		settimer1(25);
 8000e0c:	2019      	movs	r0, #25
 8000e0e:	f000 fb5f 	bl	80014d0 <settimer1>
		if (timer1_flag==1)
 8000e12:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <fsm_automatic_run+0x580>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d112      	bne.n	8000e40 <fsm_automatic_run+0x4c8>
		{
			settimer1(25);
 8000e1a:	2019      	movs	r0, #25
 8000e1c:	f000 fb58 	bl	80014d0 <settimer1>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port , LED_RED1_Pin);
 8000e20:	2102      	movs	r1, #2
 8000e22:	4836      	ldr	r0, [pc, #216]	; (8000efc <fsm_automatic_run+0x584>)
 8000e24:	f000 fee3 	bl	8001bee <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e2e:	482d      	ldr	r0, [pc, #180]	; (8000ee4 <fsm_automatic_run+0x56c>)
 8000e30:	f000 fec5 	bl	8001bbe <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , 1);
 8000e34:	2201      	movs	r2, #1
 8000e36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e3a:	482a      	ldr	r0, [pc, #168]	; (8000ee4 <fsm_automatic_run+0x56c>)
 8000e3c:	f000 febf 	bl	8001bbe <HAL_GPIO_WritePin>
		}
		display7SEG21(1);
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fb3d 	bl	80004c0 <display7SEG21>
		display7SEG22(1);
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff fcc0 	bl	80007cc <display7SEG22>
		display7SEG11((counter)/10);
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <fsm_automatic_run+0x588>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a22      	ldr	r2, [pc, #136]	; (8000edc <fsm_automatic_run+0x564>)
 8000e52:	fb82 1203 	smull	r1, r2, r2, r3
 8000e56:	1092      	asrs	r2, r2, #2
 8000e58:	17db      	asrs	r3, r3, #31
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff faa1 	bl	80003a4 <display7SEG11>
		display7SEG12((counter)%10);
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <fsm_automatic_run+0x588>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <fsm_automatic_run+0x564>)
 8000e68:	fb83 1302 	smull	r1, r3, r3, r2
 8000e6c:	1099      	asrs	r1, r3, #2
 8000e6e:	17d3      	asrs	r3, r2, #31
 8000e70:	1ac9      	subs	r1, r1, r3
 8000e72:	460b      	mov	r3, r1
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	1ad1      	subs	r1, r2, r3
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	f7ff fc01 	bl	8000684 <display7SEG12>
		if (inc()==1)
 8000e82:	f7ff f975 	bl	8000170 <inc>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d10b      	bne.n	8000ea4 <fsm_automatic_run+0x52c>
		{
			counter++;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <fsm_automatic_run+0x588>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <fsm_automatic_run+0x588>)
 8000e94:	6013      	str	r3, [r2, #0]
			if (counter>99) { counter=0;}
 8000e96:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <fsm_automatic_run+0x588>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b63      	cmp	r3, #99	; 0x63
 8000e9c:	dd02      	ble.n	8000ea4 <fsm_automatic_run+0x52c>
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <fsm_automatic_run+0x588>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
		}
		if(set()==1)
 8000ea4:	f7ff f976 	bl	8000194 <set>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d103      	bne.n	8000eb6 <fsm_automatic_run+0x53e>
		{
			counterred=counter;
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <fsm_automatic_run+0x588>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a08      	ldr	r2, [pc, #32]	; (8000ed4 <fsm_automatic_run+0x55c>)
 8000eb4:	6013      	str	r3, [r2, #0]
		}
		if(mode()==1)
 8000eb6:	f7ff f949 	bl	800014c <mode>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	f040 80e8 	bne.w	8001092 <fsm_automatic_run+0x71a>
		{
			counter=counteryellow;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <fsm_automatic_run+0x578>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <fsm_automatic_run+0x588>)
 8000ec8:	6013      	str	r3, [r2, #0]
			status=modify_yellow;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <fsm_automatic_run+0x58c>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	601a      	str	r2, [r3, #0]
			break;
 8000ed0:	e0e4      	b.n	800109c <fsm_automatic_run+0x724>
 8000ed2:	bf00      	nop
 8000ed4:	20000040 	.word	0x20000040
 8000ed8:	20000088 	.word	0x20000088
 8000edc:	66666667 	.word	0x66666667
 8000ee0:	2000003c 	.word	0x2000003c
 8000ee4:	40010c00 	.word	0x40010c00
 8000ee8:	40011000 	.word	0x40011000
 8000eec:	200000a0 	.word	0x200000a0
 8000ef0:	20000044 	.word	0x20000044
 8000ef4:	20000048 	.word	0x20000048
 8000ef8:	20000098 	.word	0x20000098
 8000efc:	40011400 	.word	0x40011400
 8000f00:	20000090 	.word	0x20000090
 8000f04:	2000008c 	.word	0x2000008c
		}
		break;

	case modify_yellow:
			settimer1(25);
 8000f08:	2019      	movs	r0, #25
 8000f0a:	f000 fae1 	bl	80014d0 <settimer1>
			if (timer1_flag==1)
 8000f0e:	4b64      	ldr	r3, [pc, #400]	; (80010a0 <fsm_automatic_run+0x728>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d112      	bne.n	8000f3c <fsm_automatic_run+0x5c4>
			{
				settimer1(25);
 8000f16:	2019      	movs	r0, #25
 8000f18:	f000 fada 	bl	80014d0 <settimer1>
				HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin);
 8000f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f20:	4860      	ldr	r0, [pc, #384]	; (80010a4 <fsm_automatic_run+0x72c>)
 8000f22:	f000 fe64 	bl	8001bee <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , 1);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2102      	movs	r1, #2
 8000f2a:	485f      	ldr	r0, [pc, #380]	; (80010a8 <fsm_automatic_run+0x730>)
 8000f2c:	f000 fe47 	bl	8001bbe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , 1);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f36:	485b      	ldr	r0, [pc, #364]	; (80010a4 <fsm_automatic_run+0x72c>)
 8000f38:	f000 fe41 	bl	8001bbe <HAL_GPIO_WritePin>
			}
			display7SEG21(2);
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f7ff fabf 	bl	80004c0 <display7SEG21>
			display7SEG22(2);
 8000f42:	2002      	movs	r0, #2
 8000f44:	f7ff fc42 	bl	80007cc <display7SEG22>
			display7SEG11((counter)/10);
 8000f48:	4b58      	ldr	r3, [pc, #352]	; (80010ac <fsm_automatic_run+0x734>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a58      	ldr	r2, [pc, #352]	; (80010b0 <fsm_automatic_run+0x738>)
 8000f4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000f52:	1092      	asrs	r2, r2, #2
 8000f54:	17db      	asrs	r3, r3, #31
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fa23 	bl	80003a4 <display7SEG11>
			display7SEG12((counter)%10);
 8000f5e:	4b53      	ldr	r3, [pc, #332]	; (80010ac <fsm_automatic_run+0x734>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <fsm_automatic_run+0x738>)
 8000f64:	fb83 1302 	smull	r1, r3, r3, r2
 8000f68:	1099      	asrs	r1, r3, #2
 8000f6a:	17d3      	asrs	r3, r2, #31
 8000f6c:	1ac9      	subs	r1, r1, r3
 8000f6e:	460b      	mov	r3, r1
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	440b      	add	r3, r1
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	1ad1      	subs	r1, r2, r3
 8000f78:	4608      	mov	r0, r1
 8000f7a:	f7ff fb83 	bl	8000684 <display7SEG12>
			if (inc()==1)
 8000f7e:	f7ff f8f7 	bl	8000170 <inc>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d10b      	bne.n	8000fa0 <fsm_automatic_run+0x628>
			{
				counter++;
 8000f88:	4b48      	ldr	r3, [pc, #288]	; (80010ac <fsm_automatic_run+0x734>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a47      	ldr	r2, [pc, #284]	; (80010ac <fsm_automatic_run+0x734>)
 8000f90:	6013      	str	r3, [r2, #0]
				if (counter>99) { counter=0;}
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <fsm_automatic_run+0x734>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b63      	cmp	r3, #99	; 0x63
 8000f98:	dd02      	ble.n	8000fa0 <fsm_automatic_run+0x628>
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <fsm_automatic_run+0x734>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
			}
			if(set()==1)
 8000fa0:	f7ff f8f8 	bl	8000194 <set>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d103      	bne.n	8000fb2 <fsm_automatic_run+0x63a>
			{
				counteryellow=counter;
 8000faa:	4b40      	ldr	r3, [pc, #256]	; (80010ac <fsm_automatic_run+0x734>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a41      	ldr	r2, [pc, #260]	; (80010b4 <fsm_automatic_run+0x73c>)
 8000fb0:	6013      	str	r3, [r2, #0]
			}
			if(mode()==1)
 8000fb2:	f7ff f8cb 	bl	800014c <mode>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d16c      	bne.n	8001096 <fsm_automatic_run+0x71e>
			{
				counter=countergreen;
 8000fbc:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <fsm_automatic_run+0x740>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a3a      	ldr	r2, [pc, #232]	; (80010ac <fsm_automatic_run+0x734>)
 8000fc2:	6013      	str	r3, [r2, #0]
				status=modify_green;
 8000fc4:	4b3d      	ldr	r3, [pc, #244]	; (80010bc <fsm_automatic_run+0x744>)
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	601a      	str	r2, [r3, #0]
				break;
 8000fca:	e067      	b.n	800109c <fsm_automatic_run+0x724>
			}
			break;

	case modify_green:
				settimer1(25);
 8000fcc:	2019      	movs	r0, #25
 8000fce:	f000 fa7f 	bl	80014d0 <settimer1>
				if (timer1_flag==1)
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <fsm_automatic_run+0x728>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d112      	bne.n	8001000 <fsm_automatic_run+0x688>
				{
					settimer1(25);
 8000fda:	2019      	movs	r0, #25
 8000fdc:	f000 fa78 	bl	80014d0 <settimer1>
					HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port , LED_GREEN1_Pin);
 8000fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe4:	482f      	ldr	r0, [pc, #188]	; (80010a4 <fsm_automatic_run+0x72c>)
 8000fe6:	f000 fe02 	bl	8001bee <HAL_GPIO_TogglePin>
					HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2102      	movs	r1, #2
 8000fee:	482e      	ldr	r0, [pc, #184]	; (80010a8 <fsm_automatic_run+0x730>)
 8000ff0:	f000 fde5 	bl	8001bbe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin (  LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin, 1);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	482a      	ldr	r0, [pc, #168]	; (80010a4 <fsm_automatic_run+0x72c>)
 8000ffc:	f000 fddf 	bl	8001bbe <HAL_GPIO_WritePin>
				}
				display7SEG21(3);
 8001000:	2003      	movs	r0, #3
 8001002:	f7ff fa5d 	bl	80004c0 <display7SEG21>
				display7SEG22(3);
 8001006:	2003      	movs	r0, #3
 8001008:	f7ff fbe0 	bl	80007cc <display7SEG22>
				display7SEG11((counter)/10);
 800100c:	4b27      	ldr	r3, [pc, #156]	; (80010ac <fsm_automatic_run+0x734>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a27      	ldr	r2, [pc, #156]	; (80010b0 <fsm_automatic_run+0x738>)
 8001012:	fb82 1203 	smull	r1, r2, r2, r3
 8001016:	1092      	asrs	r2, r2, #2
 8001018:	17db      	asrs	r3, r3, #31
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f9c1 	bl	80003a4 <display7SEG11>
				display7SEG12((counter)%10);
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <fsm_automatic_run+0x734>)
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <fsm_automatic_run+0x738>)
 8001028:	fb83 1302 	smull	r1, r3, r3, r2
 800102c:	1099      	asrs	r1, r3, #2
 800102e:	17d3      	asrs	r3, r2, #31
 8001030:	1ac9      	subs	r1, r1, r3
 8001032:	460b      	mov	r3, r1
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	440b      	add	r3, r1
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	1ad1      	subs	r1, r2, r3
 800103c:	4608      	mov	r0, r1
 800103e:	f7ff fb21 	bl	8000684 <display7SEG12>
				if (inc()==1)
 8001042:	f7ff f895 	bl	8000170 <inc>
 8001046:	4603      	mov	r3, r0
 8001048:	2b01      	cmp	r3, #1
 800104a:	d10b      	bne.n	8001064 <fsm_automatic_run+0x6ec>
				{
					counter++;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <fsm_automatic_run+0x734>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <fsm_automatic_run+0x734>)
 8001054:	6013      	str	r3, [r2, #0]
					if (counter>99) { counter=0;}
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <fsm_automatic_run+0x734>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b63      	cmp	r3, #99	; 0x63
 800105c:	dd02      	ble.n	8001064 <fsm_automatic_run+0x6ec>
 800105e:	4b13      	ldr	r3, [pc, #76]	; (80010ac <fsm_automatic_run+0x734>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
				}
				if(set()==1)
 8001064:	f7ff f896 	bl	8000194 <set>
 8001068:	4603      	mov	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d103      	bne.n	8001076 <fsm_automatic_run+0x6fe>
				{
					countergreen=counter;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <fsm_automatic_run+0x734>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a11      	ldr	r2, [pc, #68]	; (80010b8 <fsm_automatic_run+0x740>)
 8001074:	6013      	str	r3, [r2, #0]
				}
				if(mode()==1)
 8001076:	f7ff f869 	bl	800014c <mode>
 800107a:	4603      	mov	r3, r0
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10c      	bne.n	800109a <fsm_automatic_run+0x722>
				{
					counter=0;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <fsm_automatic_run+0x734>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
					status=INIT;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <fsm_automatic_run+0x744>)
 8001088:	2201      	movs	r2, #1
 800108a:	601a      	str	r2, [r3, #0]
					break;
 800108c:	e006      	b.n	800109c <fsm_automatic_run+0x724>
				}
		break;

	default: break;
 800108e:	bf00      	nop
 8001090:	e004      	b.n	800109c <fsm_automatic_run+0x724>
		break;
 8001092:	bf00      	nop
 8001094:	e002      	b.n	800109c <fsm_automatic_run+0x724>
			break;
 8001096:	bf00      	nop
 8001098:	e000      	b.n	800109c <fsm_automatic_run+0x724>
		break;
 800109a:	bf00      	nop
	}
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000098 	.word	0x20000098
 80010a4:	40010c00 	.word	0x40010c00
 80010a8:	40011400 	.word	0x40011400
 80010ac:	20000090 	.word	0x20000090
 80010b0:	66666667 	.word	0x66666667
 80010b4:	20000044 	.word	0x20000044
 80010b8:	20000048 	.word	0x20000048
 80010bc:	2000008c 	.word	0x2000008c

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c4:	f000 fa7a 	bl	80015bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010c8:	f000 f812 	bl	80010f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010cc:	f000 f898 	bl	8001200 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010d0:	f000 f84a 	bl	8001168 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80010d4:	4804      	ldr	r0, [pc, #16]	; (80010e8 <main+0x28>)
 80010d6:	f001 f9db 	bl	8002490 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status=INIT;
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <main+0x2c>)
 80010dc:	2201      	movs	r2, #1
 80010de:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run();
 80010e0:	f7ff fc4a 	bl	8000978 <fsm_automatic_run>
 80010e4:	e7fc      	b.n	80010e0 <main+0x20>
 80010e6:	bf00      	nop
 80010e8:	200000a4 	.word	0x200000a4
 80010ec:	2000008c 	.word	0x2000008c

080010f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b090      	sub	sp, #64	; 0x40
 80010f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	2228      	movs	r2, #40	; 0x28
 80010fc:	2100      	movs	r1, #0
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fd7e 	bl	8002c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
 8001110:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001116:	2301      	movs	r3, #1
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111a:	2310      	movs	r3, #16
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800111e:	2300      	movs	r3, #0
 8001120:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001122:	f107 0318 	add.w	r3, r7, #24
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fd7a 	bl	8001c20 <HAL_RCC_OscConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001132:	f000 f939 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001136:	230f      	movs	r3, #15
 8001138:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f000 ffe6 	bl	8002120 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800115a:	f000 f925 	bl	80013a8 <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3740      	adds	r7, #64	; 0x40
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	605a      	str	r2, [r3, #4]
 8001178:	609a      	str	r2, [r3, #8]
 800117a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001184:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <MX_TIM2_Init+0x94>)
 8001186:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800118a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_TIM2_Init+0x94>)
 800118e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001192:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001194:	4b19      	ldr	r3, [pc, #100]	; (80011fc <MX_TIM2_Init+0x94>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_TIM2_Init+0x94>)
 800119c:	2209      	movs	r2, #9
 800119e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a0:	4b16      	ldr	r3, [pc, #88]	; (80011fc <MX_TIM2_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_TIM2_Init+0x94>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ac:	4813      	ldr	r0, [pc, #76]	; (80011fc <MX_TIM2_Init+0x94>)
 80011ae:	f001 f91f 	bl	80023f0 <HAL_TIM_Base_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011b8:	f000 f8f6 	bl	80013a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011c2:	f107 0308 	add.w	r3, r7, #8
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <MX_TIM2_Init+0x94>)
 80011ca:	f001 fab5 	bl	8002738 <HAL_TIM_ConfigClockSource>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011d4:	f000 f8e8 	bl	80013a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	; (80011fc <MX_TIM2_Init+0x94>)
 80011e6:	f001 fc7d 	bl	8002ae4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80011f0:	f000 f8da 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000a4 	.word	0x200000a4

08001200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001214:	4b56      	ldr	r3, [pc, #344]	; (8001370 <MX_GPIO_Init+0x170>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	4a55      	ldr	r2, [pc, #340]	; (8001370 <MX_GPIO_Init+0x170>)
 800121a:	f043 0310 	orr.w	r3, r3, #16
 800121e:	6193      	str	r3, [r2, #24]
 8001220:	4b53      	ldr	r3, [pc, #332]	; (8001370 <MX_GPIO_Init+0x170>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800122c:	4b50      	ldr	r3, [pc, #320]	; (8001370 <MX_GPIO_Init+0x170>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <MX_GPIO_Init+0x170>)
 8001232:	f043 0320 	orr.w	r3, r3, #32
 8001236:	6193      	str	r3, [r2, #24]
 8001238:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <MX_GPIO_Init+0x170>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	f003 0320 	and.w	r3, r3, #32
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001244:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <MX_GPIO_Init+0x170>)
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	4a49      	ldr	r2, [pc, #292]	; (8001370 <MX_GPIO_Init+0x170>)
 800124a:	f043 0304 	orr.w	r3, r3, #4
 800124e:	6193      	str	r3, [r2, #24]
 8001250:	4b47      	ldr	r3, [pc, #284]	; (8001370 <MX_GPIO_Init+0x170>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125c:	4b44      	ldr	r3, [pc, #272]	; (8001370 <MX_GPIO_Init+0x170>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	4a43      	ldr	r2, [pc, #268]	; (8001370 <MX_GPIO_Init+0x170>)
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	6193      	str	r3, [r2, #24]
 8001268:	4b41      	ldr	r3, [pc, #260]	; (8001370 <MX_GPIO_Init+0x170>)
 800126a:	699b      	ldr	r3, [r3, #24]
 800126c:	f003 0308 	and.w	r3, r3, #8
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, GPIO_PIN_RESET);
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	483e      	ldr	r0, [pc, #248]	; (8001374 <MX_GPIO_Init+0x174>)
 800127c:	f000 fc9f 	bl	8001bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2102      	movs	r1, #2
 8001284:	483c      	ldr	r0, [pc, #240]	; (8001378 <MX_GPIO_Init+0x178>)
 8001286:	f000 fc9a 	bl	8001bbe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, a11_Pin|b11_Pin|c11_Pin|d11_Pin
 800128a:	2200      	movs	r2, #0
 800128c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001290:	483a      	ldr	r0, [pc, #232]	; (800137c <MX_GPIO_Init+0x17c>)
 8001292:	f000 fc94 	bl	8001bbe <HAL_GPIO_WritePin>
                          |e11_Pin|f11_Pin|g11_Pin|a12_Pin
                          |b12_Pin|c12_Pin|d12_Pin|e12_Pin
                          |f12_Pin|g12_Pin|a21_Pin|b21_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, c21_Pin|d21_Pin|e21_Pin|f22_Pin
 8001296:	2200      	movs	r2, #0
 8001298:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800129c:	4838      	ldr	r0, [pc, #224]	; (8001380 <MX_GPIO_Init+0x180>)
 800129e:	f000 fc8e 	bl	8001bbe <HAL_GPIO_WritePin>
                          |g22_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
                          |LED_YELLOW2_Pin|f21_Pin|g21_Pin|a22_Pin
                          |b22_Pin|c22_Pin|d22_Pin|e22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_GREEN2_Pin */
  GPIO_InitStruct.Pin = LED_GREEN2_Pin;
 80012a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GREEN2_GPIO_Port, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	482e      	ldr	r0, [pc, #184]	; (8001374 <MX_GPIO_Init+0x174>)
 80012bc:	f000 faee 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : buttonreset_Pin buttoninc_Pin */
  GPIO_InitStruct.Pin = buttonreset_Pin|buttoninc_Pin;
 80012c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ca:	2301      	movs	r3, #1
 80012cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4827      	ldr	r0, [pc, #156]	; (8001374 <MX_GPIO_Init+0x174>)
 80012d6:	f000 fae1 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : buttondec_Pin */
  GPIO_InitStruct.Pin = buttondec_Pin;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buttondec_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 0314 	add.w	r3, r7, #20
 80012ea:	4619      	mov	r1, r3
 80012ec:	4822      	ldr	r0, [pc, #136]	; (8001378 <MX_GPIO_Init+0x178>)
 80012ee:	f000 fad5 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED1_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin;
 80012f2:	2302      	movs	r3, #2
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_RED1_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	481b      	ldr	r0, [pc, #108]	; (8001378 <MX_GPIO_Init+0x178>)
 800130a:	f000 fac7 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : a11_Pin b11_Pin c11_Pin d11_Pin
                           e11_Pin f11_Pin g11_Pin a12_Pin
                           b12_Pin c12_Pin d12_Pin e12_Pin
                           f12_Pin g12_Pin a21_Pin b21_Pin */
  GPIO_InitStruct.Pin = a11_Pin|b11_Pin|c11_Pin|d11_Pin
 800130e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001312:	617b      	str	r3, [r7, #20]
                          |e11_Pin|f11_Pin|g11_Pin|a12_Pin
                          |b12_Pin|c12_Pin|d12_Pin|e12_Pin
                          |f12_Pin|g12_Pin|a21_Pin|b21_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001314:	2301      	movs	r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	4619      	mov	r1, r3
 8001326:	4815      	ldr	r0, [pc, #84]	; (800137c <MX_GPIO_Init+0x17c>)
 8001328:	f000 fab8 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : c21_Pin d21_Pin e21_Pin f22_Pin
                           g22_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin f21_Pin g21_Pin a22_Pin
                           b22_Pin c22_Pin d22_Pin e22_Pin */
  GPIO_InitStruct.Pin = c21_Pin|d21_Pin|e21_Pin|f22_Pin
 800132c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001330:	617b      	str	r3, [r7, #20]
                          |g22_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
                          |LED_YELLOW2_Pin|f21_Pin|g21_Pin|a22_Pin
                          |b22_Pin|c22_Pin|d22_Pin|e22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001332:	2301      	movs	r3, #1
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2302      	movs	r3, #2
 800133c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <MX_GPIO_Init+0x180>)
 8001346:	f000 faa9 	bl	800189c <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_GPIO_Init+0x184>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
 8001360:	4a08      	ldr	r2, [pc, #32]	; (8001384 <MX_GPIO_Init+0x184>)
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	6053      	str	r3, [r2, #4]

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	; 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	40011000 	.word	0x40011000
 8001378:	40011400 	.word	0x40011400
 800137c:	40010800 	.word	0x40010800
 8001380:	40010c00 	.word	0x40010c00
 8001384:	40010000 	.word	0x40010000

08001388 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	timerrun();
 8001390:	f000 f8c6 	bl	8001520 <timerrun>
	getresetinput();
 8001394:	f7fe ff10 	bl	80001b8 <getresetinput>
	getincinput();
 8001398:	f7fe ff60 	bl	800025c <getincinput>
	getdecinput();
 800139c:	f7fe ffb0 	bl	8000300 <getdecinput>

}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ac:	b672      	cpsid	i
}
 80013ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <Error_Handler+0x8>
	...

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <HAL_MspInit+0x5c>)
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	4a14      	ldr	r2, [pc, #80]	; (8001410 <HAL_MspInit+0x5c>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6193      	str	r3, [r2, #24]
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_MspInit+0x5c>)
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <HAL_MspInit+0x5c>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <HAL_MspInit+0x5c>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <HAL_MspInit+0x5c>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_MspInit+0x60>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <HAL_MspInit+0x60>)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001406:	bf00      	nop
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000

08001418 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d113      	bne.n	8001452 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_TIM_Base_MspInit+0x44>)
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	4a0b      	ldr	r2, [pc, #44]	; (800145c <HAL_TIM_Base_MspInit+0x44>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	61d3      	str	r3, [r2, #28]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_TIM_Base_MspInit+0x44>)
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	201c      	movs	r0, #28
 8001448:	f000 f9f1 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800144c:	201c      	movs	r0, #28
 800144e:	f000 fa0a 	bl	8001866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	e7fe      	b.n	800146a <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	e7fe      	b.n	8001470 <MemManage_Handler+0x4>

08001472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001472:	b480      	push	{r7}
 8001474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001476:	e7fe      	b.n	8001476 <BusFault_Handler+0x4>

08001478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800147c:	e7fe      	b.n	800147c <UsageFault_Handler+0x4>

0800147e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr

0800148a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	bc80      	pop	{r7}
 80014a0:	4770      	bx	lr

080014a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a6:	f000 f8cf 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <TIM2_IRQHandler+0x10>)
 80014b6:	f001 f837 	bl	8002528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200000a4 	.word	0x200000a4

080014c4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <settimer1>:
int timer1_flag=0;
int timer2_count=0;
int timer2_flag=0;

void settimer1(int n)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	timer1_count=n;
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <settimer1+0x20>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80014de:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <settimer1+0x24>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000094 	.word	0x20000094
 80014f4:	20000098 	.word	0x20000098

080014f8 <settimer2>:

void settimer2(int n)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	timer2_count=n;
 8001500:	4a05      	ldr	r2, [pc, #20]	; (8001518 <settimer2+0x20>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <settimer2+0x24>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000009c 	.word	0x2000009c
 800151c:	200000a0 	.word	0x200000a0

08001520 <timerrun>:


void timerrun()
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	if(timer1_count>0) {timer1_count--;}
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <timerrun+0x40>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	dd05      	ble.n	8001538 <timerrun+0x18>
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <timerrun+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3b01      	subs	r3, #1
 8001532:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <timerrun+0x40>)
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e002      	b.n	800153e <timerrun+0x1e>
	else {timer1_flag=1;}
 8001538:	4b0a      	ldr	r3, [pc, #40]	; (8001564 <timerrun+0x44>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

	if(timer2_count>0) {timer2_count--;}
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <timerrun+0x48>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	dd05      	ble.n	8001552 <timerrun+0x32>
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <timerrun+0x48>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3b01      	subs	r3, #1
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <timerrun+0x48>)
 800154e:	6013      	str	r3, [r2, #0]
	else {timer2_flag=1;}

}
 8001550:	e002      	b.n	8001558 <timerrun+0x38>
	else {timer2_flag=1;}
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <timerrun+0x4c>)
 8001554:	2201      	movs	r2, #1
 8001556:	601a      	str	r2, [r3, #0]
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	20000094 	.word	0x20000094
 8001564:	20000098 	.word	0x20000098
 8001568:	2000009c 	.word	0x2000009c
 800156c:	200000a0 	.word	0x200000a0

08001570 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001572:	490d      	ldr	r1, [pc, #52]	; (80015a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001588:	4c0a      	ldr	r4, [pc, #40]	; (80015b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001596:	f7ff ff95 	bl	80014c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800159a:	f001 fb0d 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159e:	f7ff fd8f 	bl	80010c0 <main>
  bx lr
 80015a2:	4770      	bx	lr
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80015ac:	08002c50 	.word	0x08002c50
  ldr r2, =_sbss
 80015b0:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80015b4:	200000f0 	.word	0x200000f0

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x28>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x28>)
 80015c6:	f043 0310 	orr.w	r3, r3, #16
 80015ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f923 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	200f      	movs	r0, #15
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff feec 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40022000 	.word	0x40022000

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f93b 	bl	8001882 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f903 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	2000004c 	.word	0x2000004c
 8001640:	20000054 	.word	0x20000054
 8001644:	20000050 	.word	0x20000050

08001648 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_IncTick+0x1c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x20>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_IncTick+0x20>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000054 	.word	0x20000054
 8001668:	200000ec 	.word	0x200000ec

0800166c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b02      	ldr	r3, [pc, #8]	; (800167c <HAL_GetTick+0x10>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	200000ec 	.word	0x200000ec

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4906      	ldr	r1, [pc, #24]	; (8001718 <__NVIC_EnableIRQ+0x34>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff90 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff2d 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff42 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff90 	bl	8001770 <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5f 	bl	800171c <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff35 	bl	80016e4 <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b08b      	sub	sp, #44	; 0x2c
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ae:	e148      	b.n	8001b42 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018b0:	2201      	movs	r2, #1
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	69fa      	ldr	r2, [r7, #28]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	f040 8137 	bne.w	8001b3c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	4aa3      	ldr	r2, [pc, #652]	; (8001b60 <HAL_GPIO_Init+0x2c4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d05e      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018d8:	4aa1      	ldr	r2, [pc, #644]	; (8001b60 <HAL_GPIO_Init+0x2c4>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d875      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018de:	4aa1      	ldr	r2, [pc, #644]	; (8001b64 <HAL_GPIO_Init+0x2c8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d058      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018e4:	4a9f      	ldr	r2, [pc, #636]	; (8001b64 <HAL_GPIO_Init+0x2c8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d86f      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018ea:	4a9f      	ldr	r2, [pc, #636]	; (8001b68 <HAL_GPIO_Init+0x2cc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d052      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018f0:	4a9d      	ldr	r2, [pc, #628]	; (8001b68 <HAL_GPIO_Init+0x2cc>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d869      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 80018f6:	4a9d      	ldr	r2, [pc, #628]	; (8001b6c <HAL_GPIO_Init+0x2d0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d04c      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 80018fc:	4a9b      	ldr	r2, [pc, #620]	; (8001b6c <HAL_GPIO_Init+0x2d0>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d863      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001902:	4a9b      	ldr	r2, [pc, #620]	; (8001b70 <HAL_GPIO_Init+0x2d4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d046      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
 8001908:	4a99      	ldr	r2, [pc, #612]	; (8001b70 <HAL_GPIO_Init+0x2d4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d85d      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d82a      	bhi.n	8001968 <HAL_GPIO_Init+0xcc>
 8001912:	2b12      	cmp	r3, #18
 8001914:	d859      	bhi.n	80019ca <HAL_GPIO_Init+0x12e>
 8001916:	a201      	add	r2, pc, #4	; (adr r2, 800191c <HAL_GPIO_Init+0x80>)
 8001918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191c:	08001997 	.word	0x08001997
 8001920:	08001971 	.word	0x08001971
 8001924:	08001983 	.word	0x08001983
 8001928:	080019c5 	.word	0x080019c5
 800192c:	080019cb 	.word	0x080019cb
 8001930:	080019cb 	.word	0x080019cb
 8001934:	080019cb 	.word	0x080019cb
 8001938:	080019cb 	.word	0x080019cb
 800193c:	080019cb 	.word	0x080019cb
 8001940:	080019cb 	.word	0x080019cb
 8001944:	080019cb 	.word	0x080019cb
 8001948:	080019cb 	.word	0x080019cb
 800194c:	080019cb 	.word	0x080019cb
 8001950:	080019cb 	.word	0x080019cb
 8001954:	080019cb 	.word	0x080019cb
 8001958:	080019cb 	.word	0x080019cb
 800195c:	080019cb 	.word	0x080019cb
 8001960:	08001979 	.word	0x08001979
 8001964:	0800198d 	.word	0x0800198d
 8001968:	4a82      	ldr	r2, [pc, #520]	; (8001b74 <HAL_GPIO_Init+0x2d8>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800196e:	e02c      	b.n	80019ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e029      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	3304      	adds	r3, #4
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e024      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	3308      	adds	r3, #8
 8001988:	623b      	str	r3, [r7, #32]
          break;
 800198a:	e01f      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	330c      	adds	r3, #12
 8001992:	623b      	str	r3, [r7, #32]
          break;
 8001994:	e01a      	b.n	80019cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d102      	bne.n	80019a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199e:	2304      	movs	r3, #4
 80019a0:	623b      	str	r3, [r7, #32]
          break;
 80019a2:	e013      	b.n	80019cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d105      	bne.n	80019b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019ac:	2308      	movs	r3, #8
 80019ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	611a      	str	r2, [r3, #16]
          break;
 80019b6:	e009      	b.n	80019cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b8:	2308      	movs	r3, #8
 80019ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69fa      	ldr	r2, [r7, #28]
 80019c0:	615a      	str	r2, [r3, #20]
          break;
 80019c2:	e003      	b.n	80019cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
          break;
 80019c8:	e000      	b.n	80019cc <HAL_GPIO_Init+0x130>
          break;
 80019ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2bff      	cmp	r3, #255	; 0xff
 80019d0:	d801      	bhi.n	80019d6 <HAL_GPIO_Init+0x13a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	e001      	b.n	80019da <HAL_GPIO_Init+0x13e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	3304      	adds	r3, #4
 80019da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2bff      	cmp	r3, #255	; 0xff
 80019e0:	d802      	bhi.n	80019e8 <HAL_GPIO_Init+0x14c>
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x152>
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	3b08      	subs	r3, #8
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	210f      	movs	r1, #15
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	401a      	ands	r2, r3
 8001a00:	6a39      	ldr	r1, [r7, #32]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	fa01 f303 	lsl.w	r3, r1, r3
 8001a08:	431a      	orrs	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8090 	beq.w	8001b3c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a1c:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	4a55      	ldr	r2, [pc, #340]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6193      	str	r3, [r2, #24]
 8001a28:	4b53      	ldr	r3, [pc, #332]	; (8001b78 <HAL_GPIO_Init+0x2dc>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_GPIO_Init+0x2e0>)
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a49      	ldr	r2, [pc, #292]	; (8001b80 <HAL_GPIO_Init+0x2e4>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <HAL_GPIO_Init+0x1e0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a48      	ldr	r2, [pc, #288]	; (8001b84 <HAL_GPIO_Init+0x2e8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d007      	beq.n	8001a78 <HAL_GPIO_Init+0x1dc>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a47      	ldr	r2, [pc, #284]	; (8001b88 <HAL_GPIO_Init+0x2ec>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_GPIO_Init+0x1d8>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e004      	b.n	8001a7e <HAL_GPIO_Init+0x1e2>
 8001a74:	2303      	movs	r3, #3
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_Init+0x1e2>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <HAL_GPIO_Init+0x1e2>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a80:	f002 0203 	and.w	r2, r2, #3
 8001a84:	0092      	lsls	r2, r2, #2
 8001a86:	4093      	lsls	r3, r2
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a8e:	493b      	ldr	r1, [pc, #236]	; (8001b7c <HAL_GPIO_Init+0x2e0>)
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4937      	ldr	r1, [pc, #220]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ab6:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4933      	ldr	r1, [pc, #204]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d006      	beq.n	8001ade <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	492d      	ldr	r1, [pc, #180]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	4929      	ldr	r1, [pc, #164]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d006      	beq.n	8001b06 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4923      	ldr	r1, [pc, #140]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
 8001b04:	e006      	b.n	8001b14 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001b08:	689a      	ldr	r2, [r3, #8]
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	491f      	ldr	r1, [pc, #124]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d006      	beq.n	8001b2e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	4919      	ldr	r1, [pc, #100]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60cb      	str	r3, [r1, #12]
 8001b2c:	e006      	b.n	8001b3c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	4915      	ldr	r1, [pc, #84]	; (8001b8c <HAL_GPIO_Init+0x2f0>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	3301      	adds	r3, #1
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f47f aeaf 	bne.w	80018b0 <HAL_GPIO_Init+0x14>
  }
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	372c      	adds	r7, #44	; 0x2c
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	10320000 	.word	0x10320000
 8001b64:	10310000 	.word	0x10310000
 8001b68:	10220000 	.word	0x10220000
 8001b6c:	10210000 	.word	0x10210000
 8001b70:	10120000 	.word	0x10120000
 8001b74:	10110000 	.word	0x10110000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40010800 	.word	0x40010800
 8001b84:	40010c00 	.word	0x40010c00
 8001b88:	40011000 	.word	0x40011000
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	807b      	strh	r3, [r7, #2]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bce:	787b      	ldrb	r3, [r7, #1]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bda:	e003      	b.n	8001be4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	041a      	lsls	r2, r3, #16
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	611a      	str	r2, [r3, #16]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr

08001bee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b085      	sub	sp, #20
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c00:	887a      	ldrh	r2, [r7, #2]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	4013      	ands	r3, r2
 8001c06:	041a      	lsls	r2, r3, #16
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	400b      	ands	r3, r1
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	611a      	str	r2, [r3, #16]
}
 8001c16:	bf00      	nop
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e26c      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8087 	beq.w	8001d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 030c 	and.w	r3, r3, #12
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d00c      	beq.n	8001c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c4c:	4b8f      	ldr	r3, [pc, #572]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d112      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
 8001c58:	4b8c      	ldr	r3, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d10b      	bne.n	8001c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d06c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x12c>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d168      	bne.n	8001d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e246      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x76>
 8001c88:	4b80      	ldr	r3, [pc, #512]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a7f      	ldr	r2, [pc, #508]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	e02e      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x98>
 8001c9e:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b78      	ldr	r3, [pc, #480]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a77      	ldr	r2, [pc, #476]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	e01d      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cc0:	d10c      	bne.n	8001cdc <HAL_RCC_OscConfig+0xbc>
 8001cc2:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a71      	ldr	r2, [pc, #452]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b6f      	ldr	r3, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a6e      	ldr	r2, [pc, #440]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6013      	str	r3, [r2, #0]
 8001cda:	e00b      	b.n	8001cf4 <HAL_RCC_OscConfig+0xd4>
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d013      	beq.n	8001d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fcb6 	bl	800166c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fcb2 	bl	800166c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1fa      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	4b5d      	ldr	r3, [pc, #372]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe4>
 8001d22:	e014      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff fca2 	bl	800166c <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff fc9e 	bl	800166c <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	; 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e1e6      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f0      	bne.n	8001d2c <HAL_RCC_OscConfig+0x10c>
 8001d4a:	e000      	b.n	8001d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d063      	beq.n	8001e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00b      	beq.n	8001d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d66:	4b49      	ldr	r3, [pc, #292]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d11c      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
 8001d72:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d116      	bne.n	8001dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d7e:	4b43      	ldr	r3, [pc, #268]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d001      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e1ba      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4939      	ldr	r1, [pc, #228]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001daa:	e03a      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db4:	4b36      	ldr	r3, [pc, #216]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dba:	f7ff fc57 	bl	800166c <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff fc53 	bl	800166c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e19b      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd4:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d0f0      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de0:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	695b      	ldr	r3, [r3, #20]
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	600b      	str	r3, [r1, #0]
 8001df4:	e015      	b.n	8001e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001df6:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fc36 	bl	800166c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e04:	f7ff fc32 	bl	800166c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e17a      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0308 	and.w	r3, r3, #8
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d03a      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d019      	beq.n	8001e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e36:	4b17      	ldr	r3, [pc, #92]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e38:	2201      	movs	r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3c:	f7ff fc16 	bl	800166c <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e44:	f7ff fc12 	bl	800166c <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e15a      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d0f0      	beq.n	8001e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e62:	2001      	movs	r0, #1
 8001e64:	f000 faa6 	bl	80023b4 <RCC_Delay>
 8001e68:	e01c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	; (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e70:	f7ff fbfc 	bl	800166c <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fbf8 	bl	800166c <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d908      	bls.n	8001e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e140      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	42420000 	.word	0x42420000
 8001e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e98:	4b9e      	ldr	r3, [pc, #632]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e9      	bne.n	8001e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a6 	beq.w	8001ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb6:	4b97      	ldr	r3, [pc, #604]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10d      	bne.n	8001ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec2:	4b94      	ldr	r3, [pc, #592]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	4a93      	ldr	r2, [pc, #588]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	61d3      	str	r3, [r2, #28]
 8001ece:	4b91      	ldr	r3, [pc, #580]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d118      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b8b      	ldr	r3, [pc, #556]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a8a      	ldr	r2, [pc, #552]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fbb9 	bl	800166c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efe:	f7ff fbb5 	bl	800166c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b64      	cmp	r3, #100	; 0x64
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e0fd      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f10:	4b81      	ldr	r3, [pc, #516]	; (8002118 <HAL_RCC_OscConfig+0x4f8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d0f0      	beq.n	8001efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <HAL_RCC_OscConfig+0x312>
 8001f24:	4b7b      	ldr	r3, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a7a      	ldr	r2, [pc, #488]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	f043 0301 	orr.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	e02d      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10c      	bne.n	8001f54 <HAL_RCC_OscConfig+0x334>
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	f023 0301 	bic.w	r3, r3, #1
 8001f44:	6213      	str	r3, [r2, #32]
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	4a72      	ldr	r2, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f4c:	f023 0304 	bic.w	r3, r3, #4
 8001f50:	6213      	str	r3, [r2, #32]
 8001f52:	e01c      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x356>
 8001f5c:	4b6d      	ldr	r3, [pc, #436]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	4a6c      	ldr	r2, [pc, #432]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6213      	str	r3, [r2, #32]
 8001f68:	4b6a      	ldr	r3, [pc, #424]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a69      	ldr	r2, [pc, #420]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e00b      	b.n	8001f8e <HAL_RCC_OscConfig+0x36e>
 8001f76:	4b67      	ldr	r3, [pc, #412]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a66      	ldr	r2, [pc, #408]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b64      	ldr	r3, [pc, #400]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a63      	ldr	r2, [pc, #396]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7ff fb69 	bl	800166c <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fb65 	bl	800166c <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0ab      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b57      	ldr	r3, [pc, #348]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ee      	beq.n	8001f9e <HAL_RCC_OscConfig+0x37e>
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fb53 	bl	800166c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fb4f 	bl	800166c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e095      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	4b4c      	ldr	r3, [pc, #304]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b48      	ldr	r3, [pc, #288]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a47      	ldr	r2, [pc, #284]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8081 	beq.w	800210a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b42      	ldr	r3, [pc, #264]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d061      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d146      	bne.n	80020aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b3f      	ldr	r3, [pc, #252]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fb23 	bl	800166c <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fb1f 	bl	800166c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e067      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002050:	d108      	bne.n	8002064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002052:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	492d      	ldr	r1, [pc, #180]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a19      	ldr	r1, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	430b      	orrs	r3, r1
 8002076:	4927      	ldr	r1, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	4313      	orrs	r3, r2
 800207a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 800207e:	2201      	movs	r2, #1
 8002080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002082:	f7ff faf3 	bl	800166c <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff faef 	bl	800166c <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e037      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCC_OscConfig+0x46a>
 80020a8:	e02f      	b.n	800210a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_RCC_OscConfig+0x4fc>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7ff fadc 	bl	800166c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7ff fad8 	bl	800166c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e020      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ca:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x498>
 80020d6:	e018      	b.n	800210a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e013      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d106      	bne.n	8002106 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d001      	beq.n	800210a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	4618      	mov	r0, r3
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
 800211c:	42420060 	.word	0x42420060

08002120 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d101      	bne.n	8002134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e0d0      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002134:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d910      	bls.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 0207 	bic.w	r2, r3, #7
 800214a:	4965      	ldr	r1, [pc, #404]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002152:	4b63      	ldr	r3, [pc, #396]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	429a      	cmp	r2, r3
 800215e:	d001      	beq.n	8002164 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0b8      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d020      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800217c:	4b59      	ldr	r3, [pc, #356]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a58      	ldr	r2, [pc, #352]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002186:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0308 	and.w	r3, r3, #8
 8002190:	2b00      	cmp	r3, #0
 8002192:	d005      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002194:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800219e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a0:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	494d      	ldr	r1, [pc, #308]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d040      	beq.n	8002240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d115      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07f      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d109      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e073      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06b      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021fe:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f023 0203 	bic.w	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4936      	ldr	r1, [pc, #216]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002210:	f7ff fa2c 	bl	800166c <HAL_GetTick>
 8002214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	e00a      	b.n	800222e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002218:	f7ff fa28 	bl	800166c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	f241 3288 	movw	r2, #5000	; 0x1388
 8002226:	4293      	cmp	r3, r2
 8002228:	d901      	bls.n	800222e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e053      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800222e:	4b2d      	ldr	r3, [pc, #180]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f003 020c 	and.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	429a      	cmp	r2, r3
 800223e:	d1eb      	bne.n	8002218 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002240:	4b27      	ldr	r3, [pc, #156]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d210      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4922      	ldr	r1, [pc, #136]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e032      	b.n	80022d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4916      	ldr	r1, [pc, #88]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0308 	and.w	r3, r3, #8
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	490e      	ldr	r1, [pc, #56]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022ae:	f000 f821 	bl	80022f4 <HAL_RCC_GetSysClockFreq>
 80022b2:	4602      	mov	r2, r0
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	490a      	ldr	r1, [pc, #40]	; (80022e8 <HAL_RCC_ClockConfig+0x1c8>)
 80022c0:	5ccb      	ldrb	r3, [r1, r3]
 80022c2:	fa22 f303 	lsr.w	r3, r2, r3
 80022c6:	4a09      	ldr	r2, [pc, #36]	; (80022ec <HAL_RCC_ClockConfig+0x1cc>)
 80022c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_RCC_ClockConfig+0x1d0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f98a 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40022000 	.word	0x40022000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	08002c38 	.word	0x08002c38
 80022ec:	2000004c 	.word	0x2000004c
 80022f0:	20000050 	.word	0x20000050

080022f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f4:	b490      	push	{r4, r7}
 80022f6:	b08a      	sub	sp, #40	; 0x28
 80022f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022fa:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80022fc:	1d3c      	adds	r4, r7, #4
 80022fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002300:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002304:	f240 2301 	movw	r3, #513	; 0x201
 8002308:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	2300      	movs	r3, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800231e:	4b22      	ldr	r3, [pc, #136]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 030c 	and.w	r3, r3, #12
 800232a:	2b04      	cmp	r3, #4
 800232c:	d002      	beq.n	8002334 <HAL_RCC_GetSysClockFreq+0x40>
 800232e:	2b08      	cmp	r3, #8
 8002330:	d003      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x46>
 8002332:	e02d      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002334:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002336:	623b      	str	r3, [r7, #32]
      break;
 8002338:	e02d      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	0c9b      	lsrs	r3, r3, #18
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002346:	4413      	add	r3, r2
 8002348:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800234c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	0c5b      	lsrs	r3, r3, #17
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002366:	4413      	add	r3, r2
 8002368:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800236c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002372:	fb02 f203 	mul.w	r2, r2, r3
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	fbb2 f3f3 	udiv	r3, r2, r3
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	e004      	b.n	800238a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	4a0b      	ldr	r2, [pc, #44]	; (80023b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002384:	fb02 f303 	mul.w	r3, r2, r3
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	623b      	str	r3, [r7, #32]
      break;
 800238e:	e002      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002392:	623b      	str	r3, [r7, #32]
      break;
 8002394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002396:	6a3b      	ldr	r3, [r7, #32]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bc90      	pop	{r4, r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	08002c28 	.word	0x08002c28
 80023a8:	40021000 	.word	0x40021000
 80023ac:	007a1200 	.word	0x007a1200
 80023b0:	003d0900 	.word	0x003d0900

080023b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <RCC_Delay+0x34>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <RCC_Delay+0x38>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a5b      	lsrs	r3, r3, #9
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d0:	bf00      	nop
  }
  while (Delay --);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <RCC_Delay+0x1c>
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr
 80023e8:	2000004c 	.word	0x2000004c
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e041      	b.n	8002486 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fffe 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f000 fa6a 	bl	8002908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
	...

08002490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d001      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e035      	b.n	8002514 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a16      	ldr	r2, [pc, #88]	; (8002520 <HAL_TIM_Base_Start_IT+0x90>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x4e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d004      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x4e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <HAL_TIM_Base_Start_IT+0x94>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d111      	bne.n	8002502 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d010      	beq.n	8002512 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	e007      	b.n	8002512 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	bc80      	pop	{r7}
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40000400 	.word	0x40000400

08002528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b02      	cmp	r3, #2
 800253c:	d122      	bne.n	8002584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b02      	cmp	r3, #2
 800254a:	d11b      	bne.n	8002584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f06f 0202 	mvn.w	r2, #2
 8002554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f9b1 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 8002570:	e005      	b.n	800257e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9a4 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f000 f9b3 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0304 	and.w	r3, r3, #4
 800258e:	2b04      	cmp	r3, #4
 8002590:	d122      	bne.n	80025d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b04      	cmp	r3, #4
 800259e:	d11b      	bne.n	80025d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f06f 0204 	mvn.w	r2, #4
 80025a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2202      	movs	r2, #2
 80025ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	699b      	ldr	r3, [r3, #24]
 80025b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f987 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 80025c4:	e005      	b.n	80025d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f97a 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 f989 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d122      	bne.n	800262c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d11b      	bne.n	800262c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f06f 0208 	mvn.w	r2, #8
 80025fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2204      	movs	r2, #4
 8002602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f95d 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 8002618:	e005      	b.n	8002626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f950 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f95f 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b10      	cmp	r3, #16
 8002638:	d122      	bne.n	8002680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b10      	cmp	r3, #16
 8002646:	d11b      	bne.n	8002680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0210 	mvn.w	r2, #16
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2208      	movs	r2, #8
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f933 	bl	80028d2 <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f926 	bl	80028c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f935 	bl	80028e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10e      	bne.n	80026ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f06f 0201 	mvn.w	r2, #1
 80026a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7fe fe6e 	bl	8001388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	2b80      	cmp	r3, #128	; 0x80
 80026b8:	d10e      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d107      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fa67 	bl	8002ba6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b40      	cmp	r3, #64	; 0x40
 80026f2:	d107      	bne.n	8002704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8f9 	bl	80028f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b20      	cmp	r3, #32
 8002710:	d10e      	bne.n	8002730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b20      	cmp	r3, #32
 800271e:	d107      	bne.n	8002730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0220 	mvn.w	r2, #32
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 fa32 	bl	8002b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002748:	2b01      	cmp	r3, #1
 800274a:	d101      	bne.n	8002750 <HAL_TIM_ConfigClockSource+0x18>
 800274c:	2302      	movs	r3, #2
 800274e:	e0b3      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x180>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800276e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002776:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002788:	d03e      	beq.n	8002808 <HAL_TIM_ConfigClockSource+0xd0>
 800278a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278e:	f200 8087 	bhi.w	80028a0 <HAL_TIM_ConfigClockSource+0x168>
 8002792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002796:	f000 8085 	beq.w	80028a4 <HAL_TIM_ConfigClockSource+0x16c>
 800279a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800279e:	d87f      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x168>
 80027a0:	2b70      	cmp	r3, #112	; 0x70
 80027a2:	d01a      	beq.n	80027da <HAL_TIM_ConfigClockSource+0xa2>
 80027a4:	2b70      	cmp	r3, #112	; 0x70
 80027a6:	d87b      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x168>
 80027a8:	2b60      	cmp	r3, #96	; 0x60
 80027aa:	d050      	beq.n	800284e <HAL_TIM_ConfigClockSource+0x116>
 80027ac:	2b60      	cmp	r3, #96	; 0x60
 80027ae:	d877      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x168>
 80027b0:	2b50      	cmp	r3, #80	; 0x50
 80027b2:	d03c      	beq.n	800282e <HAL_TIM_ConfigClockSource+0xf6>
 80027b4:	2b50      	cmp	r3, #80	; 0x50
 80027b6:	d873      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x168>
 80027b8:	2b40      	cmp	r3, #64	; 0x40
 80027ba:	d058      	beq.n	800286e <HAL_TIM_ConfigClockSource+0x136>
 80027bc:	2b40      	cmp	r3, #64	; 0x40
 80027be:	d86f      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x168>
 80027c0:	2b30      	cmp	r3, #48	; 0x30
 80027c2:	d064      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x156>
 80027c4:	2b30      	cmp	r3, #48	; 0x30
 80027c6:	d86b      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x168>
 80027c8:	2b20      	cmp	r3, #32
 80027ca:	d060      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x156>
 80027cc:	2b20      	cmp	r3, #32
 80027ce:	d867      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x168>
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d05c      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x156>
 80027d4:	2b10      	cmp	r3, #16
 80027d6:	d05a      	beq.n	800288e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027d8:	e062      	b.n	80028a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6899      	ldr	r1, [r3, #8]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f000 f95c 	bl	8002aa6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	609a      	str	r2, [r3, #8]
      break;
 8002806:	e04e      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	6899      	ldr	r1, [r3, #8]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f000 f945 	bl	8002aa6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800282a:	609a      	str	r2, [r3, #8]
      break;
 800282c:	e03b      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68db      	ldr	r3, [r3, #12]
 800283a:	461a      	mov	r2, r3
 800283c:	f000 f8bc 	bl	80029b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2150      	movs	r1, #80	; 0x50
 8002846:	4618      	mov	r0, r3
 8002848:	f000 f913 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 800284c:	e02b      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6818      	ldr	r0, [r3, #0]
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6859      	ldr	r1, [r3, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	461a      	mov	r2, r3
 800285c:	f000 f8da 	bl	8002a14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2160      	movs	r1, #96	; 0x60
 8002866:	4618      	mov	r0, r3
 8002868:	f000 f903 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 800286c:	e01b      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6818      	ldr	r0, [r3, #0]
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	461a      	mov	r2, r3
 800287c:	f000 f89c 	bl	80029b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2140      	movs	r1, #64	; 0x40
 8002886:	4618      	mov	r0, r3
 8002888:	f000 f8f3 	bl	8002a72 <TIM_ITRx_SetConfig>
      break;
 800288c:	e00b      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f000 f8ea 	bl	8002a72 <TIM_ITRx_SetConfig>
        break;
 800289e:	e002      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028a0:	bf00      	nop
 80028a2:	e000      	b.n	80028a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <TIM_Base_SetConfig+0xa8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <TIM_Base_SetConfig+0x28>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002926:	d003      	beq.n	8002930 <TIM_Base_SetConfig+0x28>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a22      	ldr	r2, [pc, #136]	; (80029b4 <TIM_Base_SetConfig+0xac>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d108      	bne.n	8002942 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002936:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <TIM_Base_SetConfig+0xa8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <TIM_Base_SetConfig+0x52>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002950:	d003      	beq.n	800295a <TIM_Base_SetConfig+0x52>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a17      	ldr	r2, [pc, #92]	; (80029b4 <TIM_Base_SetConfig+0xac>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d108      	bne.n	800296c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4313      	orrs	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a07      	ldr	r2, [pc, #28]	; (80029b0 <TIM_Base_SetConfig+0xa8>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	615a      	str	r2, [r3, #20]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	40012c00 	.word	0x40012c00
 80029b4:	40000400 	.word	0x40000400

080029b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0201 	bic.w	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f023 030a 	bic.w	r3, r3, #10
 80029f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	621a      	str	r2, [r3, #32]
}
 8002a0a:	bf00      	nop
 8002a0c:	371c      	adds	r7, #28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b087      	sub	sp, #28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	f023 0210 	bic.w	r2, r3, #16
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	031b      	lsls	r3, r3, #12
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	621a      	str	r2, [r3, #32]
}
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f043 0307 	orr.w	r3, r3, #7
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	609a      	str	r2, [r3, #8]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ac0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	021a      	lsls	r2, r3, #8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	609a      	str	r2, [r3, #8]
}
 8002ada:	bf00      	nop
 8002adc:	371c      	adds	r7, #28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d101      	bne.n	8002afc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e041      	b.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d009      	beq.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d004      	beq.n	8002b54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a10      	ldr	r2, [pc, #64]	; (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d10c      	bne.n	8002b6e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40012c00 	.word	0x40012c00
 8002b90:	40000400 	.word	0x40000400

08002b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	2600      	movs	r6, #0
 8002bbc:	4d0c      	ldr	r5, [pc, #48]	; (8002bf0 <__libc_init_array+0x38>)
 8002bbe:	4c0d      	ldr	r4, [pc, #52]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bc0:	1b64      	subs	r4, r4, r5
 8002bc2:	10a4      	asrs	r4, r4, #2
 8002bc4:	42a6      	cmp	r6, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	f000 f822 	bl	8002c10 <_init>
 8002bcc:	2600      	movs	r6, #0
 8002bce:	4d0a      	ldr	r5, [pc, #40]	; (8002bf8 <__libc_init_array+0x40>)
 8002bd0:	4c0a      	ldr	r4, [pc, #40]	; (8002bfc <__libc_init_array+0x44>)
 8002bd2:	1b64      	subs	r4, r4, r5
 8002bd4:	10a4      	asrs	r4, r4, #2
 8002bd6:	42a6      	cmp	r6, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be0:	4798      	blx	r3
 8002be2:	3601      	adds	r6, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bea:	4798      	blx	r3
 8002bec:	3601      	adds	r6, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	08002c48 	.word	0x08002c48
 8002bf4:	08002c48 	.word	0x08002c48
 8002bf8:	08002c48 	.word	0x08002c48
 8002bfc:	08002c4c 	.word	0x08002c4c

08002c00 <memset>:
 8002c00:	4603      	mov	r3, r0
 8002c02:	4402      	add	r2, r0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d100      	bne.n	8002c0a <memset+0xa>
 8002c08:	4770      	bx	lr
 8002c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0e:	e7f9      	b.n	8002c04 <memset+0x4>

08002c10 <_init>:
 8002c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c12:	bf00      	nop
 8002c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c16:	bc08      	pop	{r3}
 8002c18:	469e      	mov	lr, r3
 8002c1a:	4770      	bx	lr

08002c1c <_fini>:
 8002c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1e:	bf00      	nop
 8002c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c22:	bc08      	pop	{r3}
 8002c24:	469e      	mov	lr, r3
 8002c26:	4770      	bx	lr
